#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.9
# from Racc grammer file "".
#

require 'racc/parser.rb'

require 'puppet'
require 'puppet/pops'

module Puppet
  class ParseError < Puppet::Error; end
  class ImportError < Racc::ParseError; end
  class AlreadyImportedError < ImportError; end
end

module Puppet
  module Pops
    module Parser
      class Parser < Racc::Parser

module_eval(<<'...end egrammar.ra/module_eval...', 'egrammar.ra', 766)

# Make emacs happy
# Local Variables:
# mode: ruby
# End:
...end egrammar.ra/module_eval...
##### State transition tables begin ###

clist = [
'61,64,328,-239,62,56,155,57,244,83,-241,288,344,287,-230,114,329,-131',
'288,262,386,285,263,104,18,107,407,102,103,245,44,288,47,139,51,12,-242',
'49,38,41,257,46,39,10,11,-239,116,69,17,106,113,40,-241,372,15,16,-230',
'346,115,-131,61,64,70,286,62,56,140,57,45,114,347,84,37,65,114,67,68',
'66,-242,256,50,52,54,53,18,48,233,55,114,382,44,381,47,233,51,118,323',
'49,38,41,116,46,39,114,113,116,-244,69,17,113,264,40,115,353,15,16,244',
'115,338,116,61,64,70,113,62,56,355,57,45,69,337,115,37,65,116,67,68',
'245,113,233,50,52,54,53,18,48,115,55,-244,236,44,237,47,234,51,12,318',
'49,38,41,72,46,39,10,11,244,259,69,17,61,64,40,259,62,15,16,363,382',
'69,381,61,64,70,364,62,56,245,57,45,75,76,77,37,65,114,67,68,266,265',
'283,50,52,54,53,18,48,284,55,277,278,44,366,47,327,51,12,114,49,38,41',
'244,46,39,10,11,116,369,69,17,113,324,40,323,374,15,16,375,115,78,80',
'79,81,70,323,317,233,82,116,45,379,264,113,37,65,114,67,68,110,383,115',
'50,52,54,53,83,48,244,55,61,64,385,313,62,56,82,57,425,83,104,69,107',
'223,102,103,222,116,393,245,311,113,74,104,18,107,114,102,103,115,44',
'396,47,275,51,12,106,49,38,41,310,46,39,10,11,283,160,69,17,106,157',
'40,341,244,15,16,124,116,84,114,259,113,70,400,85,86,69,74,45,115,124',
'84,37,65,245,67,68,403,283,82,50,52,54,53,406,48,125,55,61,64,116,82',
'62,56,113,57,423,83,82,124,410,385,115,412,413,414,415,82,418,419,420',
'104,18,107,421,102,103,82,44,283,47,74,51,12,429,49,38,41,71,46,39,10',
'11,431,432,69,17,106,433,40,313,,15,16,,,,,61,64,70,,62,56,,57,45,,',
',37,65,,67,68,,,,50,52,54,53,18,48,,55,,,44,,47,,51,118,,49,38,41,,46',
'39,,,,,69,17,,,40,,,15,16,,,,,61,64,70,,62,56,,57,45,,,,37,65,,67,68',
',,,50,52,54,53,18,48,,55,,,44,,47,,51,12,,49,38,41,,46,39,10,11,,,69',
'17,,,40,,,15,16,,,,,61,64,70,,62,56,,57,45,,,,37,65,,67,68,,,,50,52',
'54,53,18,48,,55,,,44,,47,,51,12,,49,38,41,,46,39,10,11,,,69,17,,,40',
',,15,16,,,,,,,70,,,,,,45,,,,37,65,,67,68,,,,50,52,54,53,83,48,,55,61',
'64,,,62,56,,57,417,83,104,,107,,102,103,,,,,,,,104,18,107,,102,103,',
'44,,47,,51,12,106,49,38,41,,46,39,10,11,,,69,17,106,,40,,,15,16,,,,',
'61,64,70,,62,56,,57,45,,,,37,65,,67,68,,,,50,52,54,53,18,48,,55,,,44',
',47,,51,118,,49,38,41,,46,39,,,,,69,17,,,40,,,15,16,,,,,61,64,70,,62',
'56,,57,45,,,,37,65,,67,68,,,,50,52,54,53,18,48,,55,,,44,,47,,51,118',
',49,38,41,,46,39,,,,,69,17,,,40,,,15,16,,,,,61,64,70,,62,56,,57,45,',
',,37,65,,67,68,,,,50,52,54,53,18,48,,55,,,44,,47,,51,118,,49,38,41,',
'46,39,,,,,69,17,,,40,,,15,16,,,,,61,64,70,,62,56,,57,45,,,,37,65,,67',
'68,,,,50,52,54,53,18,48,,55,,,44,,47,,51,12,,49,38,41,,46,39,10,11,',
',69,17,,,40,,,15,16,,,,,61,64,70,,62,56,,57,45,,,,37,65,,67,68,,,,50',
'52,54,53,18,48,,55,,,44,,47,,51,118,,49,38,41,,46,39,,,,,69,17,,,40',
',,15,16,,,,,61,64,70,,62,56,,57,45,,,,37,65,,67,68,,,,50,52,54,53,18',
'48,,55,,,44,,47,,51,118,,49,38,41,,46,39,,,,,69,17,,,40,,,15,16,,,,',
'61,64,70,,62,56,,57,45,,,,37,65,,67,68,,,,50,52,54,53,18,48,,55,,,44',
',47,,51,118,,49,38,41,,46,39,,,,,69,17,,,40,,,15,16,,,,,61,64,70,,62',
'56,,57,45,,,,37,65,,67,68,,,,50,52,54,53,18,48,,55,,,44,,47,,51,118',
',49,38,41,,46,39,,,,,69,17,,,40,,,15,16,,,,,61,64,70,,62,56,,57,45,',
',,37,65,,67,68,,,,50,52,54,53,18,48,,55,,,44,,47,,51,118,,49,38,41,',
'46,39,,,,,69,17,,,40,,,15,16,,,,,61,64,70,,62,56,,57,45,,,,37,65,,67',
'68,,,,50,52,54,53,18,48,,55,,,44,,47,,51,12,,49,38,41,,46,39,10,11,',
',69,17,,,40,,,15,16,,,,,61,64,70,,62,56,,57,45,,,,37,65,,67,68,,,,50',
'52,54,53,18,48,,55,,,44,,47,,51,118,,49,38,41,,46,39,,,,,69,17,,,40',
',,15,16,,,,,61,64,70,,62,56,,57,45,,,,37,65,,67,68,,,,50,52,54,53,18',
'48,,55,,,44,,47,,51,118,,49,38,41,,46,39,,,,,69,17,,,40,,,15,16,,,,',
'61,64,70,,62,56,,57,45,,284,,37,65,,67,68,,,,50,52,54,53,18,48,,55,',
',44,,47,,51,118,,49,38,41,,46,39,,,,,69,17,,,40,,,15,16,,,,,61,64,70',
',62,56,144,57,45,,,,37,65,,67,68,,,,50,52,54,53,18,48,,55,,,44,,47,',
'51,12,,49,38,41,,46,39,10,11,,,69,17,,,40,,,15,16,,,,,61,64,70,,62,56',
'146,57,45,,,,37,65,,67,68,,,,50,52,54,53,18,48,,55,,,44,,47,,51,12,',
'49,38,41,,46,39,10,11,,,69,17,,,40,,,15,16,,,,,,,70,,,,,,45,,,,37,65',
',67,68,,,,50,52,54,53,83,48,,55,61,64,,,62,56,,57,148,,104,,107,,102',
'103,,,,,,,,,18,,,,,,44,,47,,51,12,106,49,38,41,,46,39,10,11,,,69,17',
',,40,,,15,16,,,,,61,64,70,,62,56,,57,45,,,,37,65,,67,68,,,,50,52,54',
'53,18,48,,55,,,44,,47,,51,12,,49,38,41,,46,39,10,11,,,69,17,,,40,,,15',
'16,,,,,,,70,,,,,,45,,,,37,65,,67,68,,,,50,52,54,53,,48,,55,61,64,,,62',
'56,,57,148,,,,,,,,,,,,,,,,18,,,,,,44,,47,,51,12,,49,38,41,,46,39,10',
'11,,,69,17,,,40,,,15,16,,,,,61,64,70,,62,56,,57,45,,,,37,65,,67,68,',
',,50,52,54,53,18,48,,55,,,44,,47,,51,12,,49,38,41,,46,39,10,11,,,69',
'17,,,40,,,15,16,,,,,61,64,70,,62,56,,159,45,,,,37,65,,67,68,,,,50,52',
'54,53,18,48,,55,,,44,,47,,51,118,,49,38,41,,46,39,,,,,69,17,,,40,,,15',
'16,,,,,61,64,70,,62,56,,57,45,,,,37,65,,67,68,,,,50,52,54,53,18,48,',
'55,,,44,,47,,51,118,,49,38,41,,46,39,,,,,69,17,,,40,,,15,16,,,,,61,64',
'70,,62,56,,57,45,,,,37,65,,67,68,,,,50,52,54,53,18,48,,55,,,44,,47,',
'51,12,,49,38,41,,46,39,10,11,,,69,17,,,40,,,15,16,,,,,61,64,70,,62,56',
',57,45,,,,37,65,,67,68,,,,50,52,54,53,18,48,,55,,,44,,47,,51,12,,49',
'38,41,,46,39,10,11,,,69,17,,,40,,,15,16,,,,,61,64,70,,62,56,,57,45,',
',,37,65,,67,68,,,,50,52,54,53,18,48,,55,,,44,,47,,51,12,,49,38,41,,46',
'39,10,11,,,69,17,,,40,,,15,16,,,,,61,64,70,,62,56,,57,45,,,,37,65,,67',
'68,,,,50,52,54,53,18,48,,55,,,44,,47,,51,12,,49,38,41,,46,39,10,11,',
',69,17,,,40,,,15,16,,,,,61,64,70,,62,56,,57,45,,,,37,65,,67,68,,,,50',
'52,54,53,18,48,,55,,,44,,47,,51,12,,49,38,41,,46,39,10,11,,,69,17,,',
'40,,,15,16,,,,,61,64,70,,62,56,,57,45,,,,37,65,,67,68,,,,50,52,54,53',
'18,48,,55,,,44,,47,,51,12,,49,38,41,,46,39,10,11,,,69,17,,,40,,,15,16',
',,,,61,64,70,,62,56,,57,45,,,,37,65,,67,68,,,,50,52,54,53,18,48,,55',
',,44,,47,,51,12,,49,38,41,,46,39,10,11,,,69,17,,,40,,,15,16,,,,,61,64',
'70,,62,56,,57,45,,,,37,65,,67,68,,,,50,52,54,53,18,48,,55,,,44,,47,',
'51,12,,49,38,41,,46,39,10,11,,,69,17,,,40,,,15,16,,,,,61,64,70,,62,56',
',57,45,,,,37,65,,67,68,,,,50,52,54,53,18,48,,55,,,44,,47,,51,12,,49',
'38,41,,46,39,10,11,,,69,17,,,40,,,15,16,,,,,61,64,70,,62,56,,57,45,',
',,37,65,,67,68,,,,50,52,54,53,18,48,,55,,,44,,47,,51,12,,49,38,41,,46',
'39,10,11,,,69,17,,,40,,,15,16,,,,,61,64,70,,62,56,,57,45,,,,37,65,,67',
'68,,,,50,52,54,53,18,48,,55,,,176,191,182,192,51,184,194,185,38,175',
',178,173,,,,,69,17,195,190,174,,,15,172,,,,61,64,,70,62,,,,193,177,',
',,37,65,,67,68,,,,186,187,189,188,,183,,55,61,64,,,62,56,,57,,,139,',
',136,,,,,,,,,,,18,,,,,,44,,47,70,51,118,,49,38,41,,46,39,140,65,,,69',
'17,,,40,,,15,16,,,,,61,64,70,,62,56,,57,45,,,,37,65,,67,68,,,,50,52',
'54,53,18,48,,55,,,44,,47,,51,118,,49,38,41,,46,39,,,,,69,17,,,40,,,15',
'16,,,,,61,64,70,,62,56,,57,45,,,,37,65,,67,68,,,,50,52,54,53,18,48,',
'55,,,44,,47,,51,118,,49,38,41,,46,39,,,,,69,17,,,40,,,15,16,,,,,61,64',
'70,,62,56,,57,45,,,,37,65,,67,68,,,,50,52,54,53,18,48,,55,,,44,,47,',
'51,118,,49,38,41,,46,39,,,,,69,17,,,40,,,15,16,,,,,61,64,70,,62,56,',
'57,45,,,,37,65,,67,68,,,,50,52,54,53,18,48,,55,,,44,,47,,51,118,,49',
'38,41,,46,39,,,,,69,17,,,40,,,15,16,,,,,61,64,70,,62,56,,57,45,,,,37',
'65,,67,68,,,,50,52,54,53,18,48,,55,,,44,,47,,51,118,,49,38,41,,46,39',
',,,,69,17,,,40,,,15,16,,,,,61,64,70,,62,56,,57,45,,,,37,65,,67,68,,',
',50,52,54,53,18,48,,55,,,44,,47,,51,118,,49,38,41,,46,39,,,,,69,17,',
',40,,,15,16,,,,,61,64,70,,62,56,,57,45,,,,37,65,,67,68,,,,50,52,54,53',
'18,48,,55,,,44,,47,,51,118,,49,38,41,,46,39,,,,,69,17,,,40,,,15,16,',
',,,61,64,70,,62,56,,57,45,,,,37,65,,67,68,,,,50,52,54,53,18,48,,55,',
',44,,47,,51,118,,49,38,41,,46,39,,,,,69,17,,,40,,,15,16,,,,,61,64,70',
',62,56,,57,45,,,,37,65,,67,68,,,,50,52,54,53,18,48,,55,,,44,,47,,51',
'118,,49,38,41,,46,39,,,,,69,17,,,40,,,15,16,,,,,61,64,70,,62,56,,57',
'45,,,,37,65,,67,68,,,,50,52,54,53,18,48,,55,,,44,,47,,51,118,,49,38',
'41,,46,39,,,,,69,17,,,40,,,15,16,,,,,61,64,70,,62,56,,57,45,,,,37,65',
',67,68,,,,50,52,54,53,18,48,,55,,,44,,47,,51,118,,49,38,41,,46,39,,',
',,69,17,,,40,,,15,16,,,,,61,64,70,,62,56,,57,45,,,,37,65,,67,68,,,,50',
'52,54,53,18,48,,55,,,44,,47,,51,118,,49,38,41,,46,39,,,,,69,17,,,40',
',,15,16,,,,,61,64,70,,62,56,,57,45,,,,37,65,,67,68,,,,50,52,54,53,18',
'48,,55,,,44,,47,,51,118,,49,38,41,,46,39,,,,,69,17,,,40,,,15,16,,,,',
'61,64,70,,62,56,,57,45,,,,37,65,,67,68,,,,50,52,54,53,18,48,,55,,,44',
',47,,51,118,,49,38,41,,46,39,,,,,69,17,,,40,,,15,16,,,,,61,64,70,,62',
'56,,57,45,,,,37,65,,67,68,,,,50,52,54,53,18,48,,55,,,44,,47,,51,118',
',49,38,41,,46,39,,,,,69,17,,,40,,,15,16,,,,,61,64,70,,62,56,,57,45,',
',,37,65,,67,68,,,,50,52,54,53,18,48,,55,,,44,,47,,51,118,,49,38,41,',
'46,39,,,,,69,17,,,40,,,15,16,,,,,61,64,70,,62,56,,57,45,,,,37,65,,67',
'68,,,,50,52,54,53,18,48,,55,,,44,,47,,51,118,,49,38,41,,46,39,,,,,69',
'17,,,40,,,15,16,,,,,61,64,70,,62,56,,57,45,,,,37,65,,67,68,,,,50,52',
'54,53,18,48,,55,,,44,,47,,51,118,,49,38,41,,46,39,,,,,69,17,,,40,,,15',
'16,,,,,61,64,70,,62,56,,57,45,,,,37,65,,67,68,,,,50,52,54,53,18,48,',
'55,,,44,,47,,51,118,,49,38,41,,46,39,,,,,69,17,,,40,,,15,16,,,,,,,70',
',,,,,45,,,219,37,65,,67,68,,,,50,52,54,53,,48,,55,61,64,,,62,56,,57',
',,,,,,,,,,,,,,,,18,221,,,,,44,,47,,51,12,,49,38,41,,46,39,10,11,,,69',
'17,,,40,,,15,16,,,,,61,64,70,,62,56,,57,45,,,,37,65,,67,68,,,,50,52',
'54,53,18,48,,55,,,44,,47,,51,12,,49,38,41,,46,39,10,11,,,69,17,,,40',
',,15,16,,,,,61,64,70,,62,56,,57,45,,,,37,65,,67,68,,,,50,52,54,53,18',
'48,,55,,,44,,47,,51,12,,49,38,41,,46,39,10,11,,,69,17,,,40,,,15,16,',
',,,61,64,70,,62,56,,57,45,,,,37,65,,67,68,,,,50,52,54,53,18,48,,55,',
',44,,47,,51,118,,49,38,41,,46,39,,,,,69,17,,,40,,,15,16,,,,,61,64,70',
',62,56,,57,45,,,,37,65,,67,68,,,,50,52,54,53,18,48,,55,,,44,,47,,51',
'118,,49,38,41,,46,39,,,,,69,17,,,40,,,15,16,,,,61,64,,70,62,,,,,45,',
',,37,65,,67,68,,,,50,52,54,53,,48,,55,61,64,,,62,56,,57,387,,139,,,136',
',,,,,,,,,,18,,,,,,44,,47,70,51,118,,49,38,41,,46,39,140,65,,,69,17,',
',40,,,15,16,,,,,61,64,70,,62,56,,57,45,,,,37,65,,67,68,,,,50,52,54,53',
'18,48,,55,,,44,,47,,51,12,,49,38,41,,46,39,10,11,,,69,17,,,40,,,15,16',
',,,,61,64,70,,62,56,,57,45,,,,37,65,,67,68,,,,50,52,54,53,18,48,,55',
',,44,,47,,51,118,,49,38,41,,46,39,,,,,69,17,,,40,,,15,16,,,,,61,64,70',
',62,56,,57,45,,,,37,65,,67,68,,,,50,52,54,53,18,48,,55,,,44,,47,,51',
'118,,49,38,41,,46,39,,,,,69,17,,,40,,,15,16,,,,,61,64,70,,62,56,,57',
'45,,,,37,65,,67,68,,,,50,52,54,53,18,48,,55,,,44,,47,,51,118,,49,38',
'41,,46,39,,,,,69,17,,,40,,,15,16,,,,,61,64,70,,62,56,,57,45,,,,37,65',
',67,68,,,,50,52,54,53,18,48,,55,,,44,,47,,51,118,,49,38,41,,46,39,,',
',,69,17,,,40,,,15,16,,,,,61,64,70,,62,56,,57,45,,,,37,65,,67,68,,,,50',
'52,54,53,18,48,,55,,,44,,47,,51,118,,49,38,41,,46,39,,,,,69,17,,,40',
',,15,16,,,,,61,64,70,,62,56,,57,45,,,,37,65,,67,68,,,,50,52,54,53,18',
'48,,55,,,44,,47,,51,118,,49,38,41,,46,39,,,,,69,17,,,40,,,15,16,,,,',
'61,64,70,,62,56,,57,45,,,,37,65,,67,68,,,,50,52,54,53,18,48,,55,,,44',
',47,,51,118,,49,38,41,,46,39,,,,,69,17,,,40,,,15,16,,,,,61,64,70,,62',
'56,,57,45,,,,37,65,,67,68,,,,50,52,54,53,18,48,,55,,,44,,47,,51,118',
',49,38,41,,46,39,,,,,69,17,,,40,,,15,16,,,,,61,64,70,,62,56,,57,45,',
',,37,65,,67,68,,,,50,52,54,53,18,48,,55,,,44,,47,,51,118,,49,38,41,',
'46,39,,,,,69,17,,,40,,,15,16,,,,,,,70,,,,,,45,,,,37,65,,67,68,,,,50',
'52,54,53,,48,,55,61,64,,,62,56,,57,301,191,300,192,,298,194,302,,295',
',297,299,,,,18,249,,195,190,303,44,,47,296,51,12,,49,38,41,,46,39,10',
'11,193,304,69,17,,,40,,,15,16,,,307,308,306,305,70,309,,,,,45,,,,37',
'65,,67,68,,,,50,52,54,53,,48,,55,61,64,,,62,56,,57,321,83,,,,,,,,,,',
',,,104,18,107,,102,103,,44,,47,,51,12,,49,38,41,,46,39,10,11,,,69,17',
'106,,40,,,15,16,,,,,,,70,,85,86,,,45,,,84,37,65,,67,68,,,,50,52,54,53',
',48,,55,61,64,,,62,56,,57,331,83,,,,,,,,,,,,,,104,18,107,,102,103,,44',
',47,,51,12,,49,38,41,,46,39,10,11,,,69,17,106,,40,,,15,16,,,,,,,70,',
'85,86,,,45,,,84,37,65,,67,68,,,,50,52,54,53,,48,,55,61,64,,,62,56,,57',
'333,,,,,,,,,,,,,,,,18,,,,,,44,,47,,51,12,,49,38,41,,46,39,10,11,,,69',
'17,,,40,,,15,16,,,,,61,64,70,,62,56,,57,45,,,,37,65,,67,68,,,,50,52',
'54,53,18,48,,55,,,44,,47,,51,12,,49,38,41,,46,39,10,11,,,69,17,,,40',
',,15,16,,,,,61,64,70,,62,56,,57,45,,,,37,65,,67,68,,,,50,52,54,53,18',
'48,,55,,,44,,47,,51,12,,49,38,41,,46,39,10,11,,,69,17,,,40,,,15,16,',
',,,,,70,,,,,,45,,,,37,65,,67,68,,,,50,52,54,53,,48,,55,61,64,,,62,56',
',57,348,,,,,,,,,,,,,,,,18,,,,,,44,,47,,51,12,,49,38,41,,46,39,10,11',
',,69,17,,,40,,,15,16,,,,,61,64,70,,62,56,,57,45,,,,37,65,,67,68,,,,50',
'52,54,53,18,48,,55,,,44,,47,,51,118,,49,38,41,,46,39,,,,,69,17,,,40',
',,15,16,,,,,61,64,70,,62,56,,57,45,,,,37,65,,67,68,,,,50,52,54,53,18',
'48,,55,,,44,,47,,51,12,,49,38,41,,46,39,10,11,,,69,17,,,40,,,15,16,',
',,,,,70,,,,,,45,,,,37,65,,67,68,83,,252,50,52,54,53,,48,,55,,99,94,104',
',107,,102,103,,95,97,96,98,,61,64,,,62,,,,,,,,,,106,,,,101,100,,,87',
'88,90,89,92,93,,85,86,83,,251,,,84,,,139,,,136,99,94,104,,107,,102,103',
',95,97,96,98,,,91,,,,70,,,,,,,,,106,140,65,,101,100,,,87,88,90,89,92',
'93,,85,86,83,,250,,,84,,,,,,,99,94,104,,107,,102,103,,95,97,96,98,,',
'91,,,,,,,,,,,,,106,,,,101,100,,,87,88,90,89,92,93,83,85,86,,,,,,84,',
',,99,94,104,314,107,,102,103,,95,97,96,98,,,,,,91,,,,,,,,,,106,,,,101',
'100,,83,87,88,90,89,92,93,,85,86,,,99,94,104,84,107,,102,103,,95,97',
'96,98,,,,,,,,,,,,,91,,,106,,,,101,100,,83,87,88,90,89,92,93,,85,86,',
',99,94,104,84,107,,102,103,,95,97,96,98,,,,,,,,,,,,,91,,,106,,,,101',
'100,,83,87,88,90,89,92,93,,85,86,,,99,94,104,84,107,,102,103,,95,97',
'96,98,,,,,,,,,,,,,91,,,106,,,,101,100,,,87,88,90,89,92,93,83,85,86,',
',289,,,84,,,,99,94,104,,107,,102,103,,95,97,96,98,,,,,,91,,,,,,,,,,106',
',,,101,100,,83,87,88,90,89,92,93,,85,86,,,99,94,104,84,107,,102,103',
',95,97,96,98,,,,,,,,,,,,,91,,,106,,,,101,100,,83,87,88,90,89,92,93,',
'85,86,,,99,94,104,84,107,,102,103,,95,97,96,98,,277,278,,,,,,,,,,91',
',,106,,,,101,100,,83,87,88,90,89,92,93,,85,86,,,99,94,104,84,107,,102',
'103,83,95,97,96,98,,,,,,,,99,94,104,,107,91,102,103,106,95,97,96,98',
'100,,,87,88,90,89,92,93,,85,86,,,,106,,84,,,,,83,87,88,90,89,92,93,',
'85,86,,,,94,104,84,107,91,102,103,83,95,,,,,,,,,,,,94,104,,107,91,102',
'103,106,95,,,,83,,,87,88,90,89,92,93,,85,86,,94,104,106,107,84,102,103',
',95,,87,88,90,89,92,93,,85,86,,,,,,84,,91,106,,,,,,,,87,88,90,89,92',
'93,83,85,86,,,91,,,84,,,,99,94,104,281,107,,102,103,83,95,97,96,98,',
',,,,91,,,94,104,,107,,102,103,106,95,,,101,100,,83,87,88,90,89,92,93',
',85,86,,,,106,104,84,107,,102,103,83,87,88,90,89,92,93,,85,86,,,99,94',
'104,84,107,91,102,103,106,95,97,96,98,,,,87,88,90,89,92,93,,85,86,91',
',,106,,84,,101,100,,83,87,88,90,89,92,93,,85,86,,,,,104,84,107,91,102',
'103,83,,,,,,,,,,,,,,104,,107,91,102,103,106,,,,,,,83,87,88,90,89,92',
'93,,85,86,,,,106,104,84,107,,102,103,83,87,88,90,89,,,,85,86,,,99,94',
'104,84,107,91,102,103,106,95,97,96,98,,,,87,88,90,89,,,,85,86,91,,,106',
',84,,101,100,,83,87,88,90,89,92,93,,85,86,,,99,94,104,84,107,91,102',
'103,,95,97,96,98,,,,,,,,,,,,,91,,,106,,,,101,100,,83,87,88,90,89,92',
'93,,85,86,,,99,94,104,84,107,83,102,103,,95,97,96,98,,,,,,,104,,107',
',102,103,91,,,106,,,,101,100,,,87,88,90,89,92,93,,85,86,106,,,,,84,',
'83,,,90,89,,,,85,86,,,99,94,104,84,107,83,102,103,91,95,97,96,98,,,',
',,,104,,107,,102,103,91,61,64,106,,62,,101,100,,,87,88,90,89,92,93,',
'85,86,106,,,,,84,,,,,90,89,,,,85,86,,,,139,,84,136,,,,91,,,301,191,300',
'192,,298,194,302,,295,,297,299,70,91,,,,,195,190,303,,140,65,296,,,',
',,,,,,,,193,304,,,,,,,,,,,,307,308,306,305,,309,301,191,300,192,,298',
'194,302,,295,,297,299,,,,,,,195,190,303,,,,296,,,,,,,,,,,,193,304,,',
',,,,,,,,,307,308,306,305,,309,301,191,300,192,,298,194,302,,295,,297',
'299,,,,,,,195,190,303,,,,296,,,,,,,,,,,,193,304,,,,,,,,,,,,307,308,306',
'305,,309' ]
        racc_action_table = arr = ::Array.new(6865, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'0,0,248,174,0,0,65,0,246,200,188,334,258,197,173,317,248,175,197,147',
'334,181,147,200,0,200,378,200,200,246,0,378,0,257,0,0,189,0,0,0,134',
'0,0,0,0,174,317,0,0,200,317,0,188,317,0,0,173,260,317,175,420,420,0',
'181,420,420,257,420,0,50,261,200,0,0,186,0,0,0,189,132,0,0,0,0,420,0',
'131,0,184,379,420,379,420,130,420,420,274,420,420,420,50,420,420,48',
'50,186,187,420,420,186,279,420,50,280,420,420,124,186,254,184,4,4,420',
'184,4,4,282,4,420,124,253,184,420,420,48,420,420,124,48,141,420,420',
'420,420,4,420,48,420,187,123,4,124,4,121,4,4,233,4,4,4,4,4,4,4,4,233',
'143,4,4,155,155,4,145,155,4,4,290,331,233,331,413,413,4,292,413,413',
'233,413,4,7,7,7,4,4,183,4,4,152,152,294,4,4,4,4,413,4,296,4,353,353',
'413,312,413,247,413,413,118,413,413,413,245,413,413,413,413,183,315',
'413,413,183,244,413,319,320,413,413,322,183,7,7,7,7,413,238,231,111',
'109,118,413,330,150,118,413,413,12,413,413,12,332,118,413,413,413,413',
'199,413,157,413,412,412,333,228,412,412,108,412,412,205,199,157,199',
'105,199,199,104,12,339,157,227,12,73,205,412,205,182,205,205,12,412',
'352,412,157,412,412,199,412,412,412,225,412,412,412,412,354,71,412,412',
'205,66,412,255,323,412,412,221,182,199,47,220,182,412,362,205,205,323',
'161,412,182,364,205,412,412,323,412,412,365,368,166,412,412,412,412',
'373,412,43,412,410,410,47,167,410,410,47,410,410,119,168,42,382,383',
'47,385,386,389,392,169,395,398,399,119,410,119,405,119,119,8,410,171',
'410,5,410,410,416,410,410,410,1,410,410,410,410,422,424,410,410,119',
'426,410,430,,410,410,,,,,178,178,410,,178,178,,178,410,,,,410,410,,410',
'410,,,,410,410,410,410,178,410,,410,,,178,,178,,178,178,,178,178,178',
',178,178,,,,,178,178,,,178,,,178,178,,,,,10,10,178,,10,10,,10,178,,',
',178,178,,178,178,,,,178,178,178,178,10,178,,178,,,10,,10,,10,10,,10',
'10,10,,10,10,10,10,,,10,10,,,10,,,10,10,,,,,11,11,10,,11,11,,11,10,',
',,10,10,,10,10,,,,10,10,10,10,11,10,,10,,,11,,11,,11,11,,11,11,11,,11',
'11,11,11,,,11,11,,,11,,,11,11,,,,,,,11,,,,,,11,,,,11,11,,11,11,,,,11',
'11,11,11,120,11,,11,393,393,,,393,393,,393,393,198,120,,120,,120,120',
',,,,,,,198,393,198,,198,198,,393,,393,,393,393,120,393,393,393,,393',
'393,393,393,,,393,393,198,,393,,,393,393,,,,,15,15,393,,15,15,,15,393',
',,,393,393,,393,393,,,,393,393,393,393,15,393,,393,,,15,,15,,15,15,',
'15,15,15,,15,15,,,,,15,15,,,15,,,15,15,,,,,16,16,15,,16,16,,16,15,,',
',15,15,,15,15,,,,15,15,15,15,16,15,,15,,,16,,16,,16,16,,16,16,16,,16',
'16,,,,,16,16,,,16,,,16,16,,,,,17,17,16,,17,17,,17,16,,,,16,16,,16,16',
',,,16,16,16,16,17,16,,16,,,17,,17,,17,17,,17,17,17,,17,17,,,,,17,17',
',,17,,,17,17,,,,,18,18,17,,18,18,,18,17,,,,17,17,,17,17,,,,17,17,17',
'17,18,17,,17,,,18,,18,,18,18,,18,18,18,,18,18,18,18,,,18,18,,,18,,,18',
'18,,,,,381,381,18,,381,381,,381,18,,,,18,18,,18,18,,,,18,18,18,18,381',
'18,,18,,,381,,381,,381,381,,381,381,381,,381,381,,,,,381,381,,,381,',
',381,381,,,,,177,177,381,,177,177,,177,381,,,,381,381,,381,381,,,,381',
'381,381,381,177,381,,381,,,177,,177,,177,177,,177,177,177,,177,177,',
',,,177,177,,,177,,,177,177,,,,,44,44,177,,44,44,,44,177,,,,177,177,',
'177,177,,,,177,177,177,177,44,177,,177,,,44,,44,,44,44,,44,44,44,,44',
'44,,,,,44,44,,,44,,,44,44,,,,,45,45,44,,45,45,,45,44,,,,44,44,,44,44',
',,,44,44,44,44,45,44,,44,,,45,,45,,45,45,,45,45,45,,45,45,,,,,45,45',
',,45,,,45,45,,,,,46,46,45,,46,46,,46,45,,,,45,45,,45,45,,,,45,45,45',
'45,46,45,,45,,,46,,46,,46,46,,46,46,46,,46,46,,,,,46,46,,,46,,,46,46',
',,,,369,369,46,,369,369,,369,46,,,,46,46,,46,46,,,,46,46,46,46,369,46',
',46,,,369,,369,,369,369,,369,369,369,,369,369,369,369,,,369,369,,,369',
',,369,369,,,,,363,363,369,,363,363,,363,369,,,,369,369,,369,369,,,,369',
'369,369,369,363,369,,369,,,363,,363,,363,363,,363,363,363,,363,363,',
',,,363,363,,,363,,,363,363,,,,,176,176,363,,176,176,,176,363,,,,363',
'363,,363,363,,,,363,363,363,363,176,363,,363,,,176,,176,,176,176,,176',
'176,176,,176,176,,,,,176,176,,,176,,,176,176,,,,,172,172,176,,172,172',
',172,176,,172,,176,176,,176,176,,,,176,176,176,176,172,176,,176,,,172',
',172,,172,172,,172,172,172,,172,172,,,,,172,172,,,172,,,172,172,,,,',
'55,55,172,,55,55,55,55,172,,,,172,172,,172,172,,,,172,172,172,172,55',
'172,,172,,,55,,55,,55,55,,55,55,55,,55,55,55,55,,,55,55,,,55,,,55,55',
',,,,56,56,55,,56,56,56,56,55,,,,55,55,,55,55,,,,55,55,55,55,56,55,,55',
',,56,,56,,56,56,,56,56,56,,56,56,56,56,,,56,56,,,56,,,56,56,,,,,,,56',
',,,,,56,,,,56,56,,56,56,,,,56,56,56,56,117,56,,56,57,57,,,57,57,,57',
'57,,117,,117,,117,117,,,,,,,,,57,,,,,,57,,57,,57,57,117,57,57,57,,57',
'57,57,57,,,57,57,,,57,,,57,57,,,,,63,63,57,,63,63,,63,57,,,,57,57,,57',
'57,,,,57,57,57,57,63,57,,57,,,63,,63,,63,63,,63,63,63,,63,63,63,63,',
',63,63,,,63,,,63,63,,,,,,,63,,,,,,63,,,,63,63,,63,63,,,,63,63,63,63',
',63,,63,159,159,,,159,159,,159,159,,,,,,,,,,,,,,,,159,,,,,,159,,159',
',159,159,,159,159,159,,159,159,159,159,,,159,159,,,159,,,159,159,,,',
',156,156,159,,156,156,,156,159,,,,159,159,,159,159,,,,159,159,159,159',
'156,159,,159,,,156,,156,,156,156,,156,156,156,,156,156,156,156,,,156',
'156,,,156,,,156,156,,,,,68,68,156,,68,68,,68,156,,,,156,156,,156,156',
',,,156,156,156,156,68,156,,156,,,68,,68,,68,68,,68,68,68,,68,68,,,,',
'68,68,,,68,,,68,68,,,,,219,219,68,,219,219,,219,68,,,,68,68,,68,68,',
',,68,68,68,68,219,68,,68,,,219,,219,,219,219,,219,219,219,,219,219,',
',,,219,219,,,219,,,219,219,,,,,72,72,219,,72,72,,72,219,,,,219,219,',
'219,219,,,,219,219,219,219,72,219,,219,,,72,,72,,72,72,,72,72,72,,72',
'72,72,72,,,72,72,,,72,,,72,72,,,,,344,344,72,,344,344,,344,72,,,,72',
'72,,72,72,,,,72,72,72,72,344,72,,72,,,344,,344,,344,344,,344,344,344',
',344,344,344,344,,,344,344,,,344,,,344,344,,,,,74,74,344,,74,74,,74',
'344,,,,344,344,,344,344,,,,344,344,344,344,74,344,,344,,,74,,74,,74',
'74,,74,74,74,,74,74,74,74,,,74,74,,,74,,,74,74,,,,,75,75,74,,75,75,',
'75,74,,,,74,74,,74,74,,,,74,74,74,74,75,74,,74,,,75,,75,,75,75,,75,75',
'75,,75,75,75,75,,,75,75,,,75,,,75,75,,,,,76,76,75,,76,76,,76,75,,,,75',
'75,,75,75,,,,75,75,75,75,76,75,,75,,,76,,76,,76,76,,76,76,76,,76,76',
'76,76,,,76,76,,,76,,,76,76,,,,,77,77,76,,77,77,,77,76,,,,76,76,,76,76',
',,,76,76,76,76,77,76,,76,,,77,,77,,77,77,,77,77,77,,77,77,77,77,,,77',
'77,,,77,,,77,77,,,,,78,78,77,,78,78,,78,77,,,,77,77,,77,77,,,,77,77',
'77,77,78,77,,77,,,78,,78,,78,78,,78,78,78,,78,78,78,78,,,78,78,,,78',
',,78,78,,,,,79,79,78,,79,79,,79,78,,,,78,78,,78,78,,,,78,78,78,78,79',
'78,,78,,,79,,79,,79,79,,79,79,79,,79,79,79,79,,,79,79,,,79,,,79,79,',
',,,80,80,79,,80,80,,80,79,,,,79,79,,79,79,,,,79,79,79,79,80,79,,79,',
',80,,80,,80,80,,80,80,80,,80,80,80,80,,,80,80,,,80,,,80,80,,,,,81,81',
'80,,81,81,,81,80,,,,80,80,,80,80,,,,80,80,80,80,81,80,,80,,,81,,81,',
'81,81,,81,81,81,,81,81,81,81,,,81,81,,,81,,,81,81,,,,,82,82,81,,82,82',
',82,81,,,,81,81,,81,81,,,,81,81,81,81,82,81,,81,,,82,82,82,82,82,82',
'82,82,82,82,,82,82,,,,,82,82,82,82,82,,,82,82,,,,185,185,,82,185,,,',
'82,82,,,,82,82,,82,82,,,,82,82,82,82,,82,,82,83,83,,,83,83,,83,,,185',
',,185,,,,,,,,,,,83,,,,,,83,,83,185,83,83,,83,83,83,,83,83,185,185,,',
'83,83,,,83,,,83,83,,,,,84,84,83,,84,84,,84,83,,,,83,83,,83,83,,,,83',
'83,83,83,84,83,,83,,,84,,84,,84,84,,84,84,84,,84,84,,,,,84,84,,,84,',
',84,84,,,,,85,85,84,,85,85,,85,84,,,,84,84,,84,84,,,,84,84,84,84,85',
'84,,84,,,85,,85,,85,85,,85,85,85,,85,85,,,,,85,85,,,85,,,85,85,,,,,86',
'86,85,,86,86,,86,85,,,,85,85,,85,85,,,,85,85,85,85,86,85,,85,,,86,,86',
',86,86,,86,86,86,,86,86,,,,,86,86,,,86,,,86,86,,,,,87,87,86,,87,87,',
'87,86,,,,86,86,,86,86,,,,86,86,86,86,87,86,,86,,,87,,87,,87,87,,87,87',
'87,,87,87,,,,,87,87,,,87,,,87,87,,,,,88,88,87,,88,88,,88,87,,,,87,87',
',87,87,,,,87,87,87,87,88,87,,87,,,88,,88,,88,88,,88,88,88,,88,88,,,',
',88,88,,,88,,,88,88,,,,,89,89,88,,89,89,,89,88,,,,88,88,,88,88,,,,88',
'88,88,88,89,88,,88,,,89,,89,,89,89,,89,89,89,,89,89,,,,,89,89,,,89,',
',89,89,,,,,90,90,89,,90,90,,90,89,,,,89,89,,89,89,,,,89,89,89,89,90',
'89,,89,,,90,,90,,90,90,,90,90,90,,90,90,,,,,90,90,,,90,,,90,90,,,,,91',
'91,90,,91,91,,91,90,,,,90,90,,90,90,,,,90,90,90,90,91,90,,90,,,91,,91',
',91,91,,91,91,91,,91,91,,,,,91,91,,,91,,,91,91,,,,,92,92,91,,92,92,',
'92,91,,,,91,91,,91,91,,,,91,91,91,91,92,91,,91,,,92,,92,,92,92,,92,92',
'92,,92,92,,,,,92,92,,,92,,,92,92,,,,,93,93,92,,93,93,,93,92,,,,92,92',
',92,92,,,,92,92,92,92,93,92,,92,,,93,,93,,93,93,,93,93,93,,93,93,,,',
',93,93,,,93,,,93,93,,,,,94,94,93,,94,94,,94,93,,,,93,93,,93,93,,,,93',
'93,93,93,94,93,,93,,,94,,94,,94,94,,94,94,94,,94,94,,,,,94,94,,,94,',
',94,94,,,,,95,95,94,,95,95,,95,94,,,,94,94,,94,94,,,,94,94,94,94,95',
'94,,94,,,95,,95,,95,95,,95,95,95,,95,95,,,,,95,95,,,95,,,95,95,,,,,96',
'96,95,,96,96,,96,95,,,,95,95,,95,95,,,,95,95,95,95,96,95,,95,,,96,,96',
',96,96,,96,96,96,,96,96,,,,,96,96,,,96,,,96,96,,,,,97,97,96,,97,97,',
'97,96,,,,96,96,,96,96,,,,96,96,96,96,97,96,,96,,,97,,97,,97,97,,97,97',
'97,,97,97,,,,,97,97,,,97,,,97,97,,,,,98,98,97,,98,98,,98,97,,,,97,97',
',97,97,,,,97,97,97,97,98,97,,97,,,98,,98,,98,98,,98,98,98,,98,98,,,',
',98,98,,,98,,,98,98,,,,,99,99,98,,99,99,,99,98,,,,98,98,,98,98,,,,98',
'98,98,98,99,98,,98,,,99,,99,,99,99,,99,99,99,,99,99,,,,,99,99,,,99,',
',99,99,,,,,100,100,99,,100,100,,100,99,,,,99,99,,99,99,,,,99,99,99,99',
'100,99,,99,,,100,,100,,100,100,,100,100,100,,100,100,,,,,100,100,,,100',
',,100,100,,,,,101,101,100,,101,101,,101,100,,,,100,100,,100,100,,,,100',
'100,100,100,101,100,,100,,,101,,101,,101,101,,101,101,101,,101,101,',
',,,101,101,,,101,,,101,101,,,,,102,102,101,,102,102,,102,101,,,,101',
'101,,101,101,,,,101,101,101,101,102,101,,101,,,102,,102,,102,102,,102',
'102,102,,102,102,,,,,102,102,,,102,,,102,102,,,,,,,102,,,,,,102,,,102',
'102,102,,102,102,,,,102,102,102,102,,102,,102,103,103,,,103,103,,103',
',,,,,,,,,,,,,,,,103,103,,,,,103,,103,,103,103,,103,103,103,,103,103',
'103,103,,,103,103,,,103,,,103,103,,,,,338,338,103,,338,338,,338,103',
',,,103,103,,103,103,,,,103,103,103,103,338,103,,103,,,338,,338,,338',
'338,,338,338,338,,338,338,338,338,,,338,338,,,338,,,338,338,,,,,337',
'337,338,,337,337,,337,338,,,,338,338,,338,338,,,,338,338,338,338,337',
'338,,338,,,337,,337,,337,337,,337,337,337,,337,337,337,337,,,337,337',
',,337,,,337,337,,,,,106,106,337,,106,106,,106,337,,,,337,337,,337,337',
',,,337,337,337,337,106,337,,337,,,106,,106,,106,106,,106,106,106,,106',
'106,,,,,106,106,,,106,,,106,106,,,,,107,107,106,,107,107,,107,106,,',
',106,106,,106,106,,,,106,106,106,106,107,106,,106,,,107,,107,,107,107',
',107,107,107,,107,107,,,,,107,107,,,107,,,107,107,,,,341,341,,107,341',
',,,,107,,,,107,107,,107,107,,,,107,107,107,107,,107,,107,335,335,,,335',
'335,,335,335,,341,,,341,,,,,,,,,,,335,,,,,,335,,335,341,335,335,,335',
'335,335,,335,335,341,341,,,335,335,,,335,,,335,335,,,,,328,328,335,',
'328,328,,328,335,,,,335,335,,335,335,,,,335,335,335,335,328,335,,335',
',,328,,328,,328,328,,328,328,328,,328,328,328,328,,,328,328,,,328,,',
'328,328,,,,,110,110,328,,110,110,,110,328,,,,328,328,,328,328,,,,328',
'328,328,328,110,328,,328,,,110,,110,,110,110,,110,110,110,,110,110,',
',,,110,110,,,110,,,110,110,,,,,327,327,110,,327,327,,327,110,,,,110',
'110,,110,110,,,,110,110,110,110,327,110,,110,,,327,,327,,327,327,,327',
'327,327,,327,327,,,,,327,327,,,327,,,327,327,,,,,324,324,327,,324,324',
',324,327,,,,327,327,,327,327,,,,327,327,327,327,324,327,,327,,,324,',
'324,,324,324,,324,324,324,,324,324,,,,,324,324,,,324,,,324,324,,,,,313',
'313,324,,313,313,,313,324,,,,324,324,,324,324,,,,324,324,324,324,313',
'324,,324,,,313,,313,,313,313,,313,313,313,,313,313,,,,,313,313,,,313',
',,313,313,,,,,289,289,313,,289,289,,289,313,,,,313,313,,313,313,,,,313',
'313,313,313,289,313,,313,,,289,,289,,289,289,,289,289,289,,289,289,',
',,,289,289,,,289,,,289,289,,,,,288,288,289,,288,288,,288,289,,,,289',
'289,,289,289,,,,289,289,289,289,288,289,,289,,,288,,288,,288,288,,288',
'288,288,,288,288,,,,,288,288,,,288,,,288,288,,,,,286,286,288,,286,286',
',286,288,,,,288,288,,288,288,,,,288,288,288,288,286,288,,288,,,286,',
'286,,286,286,,286,286,286,,286,286,,,,,286,286,,,286,,,286,286,,,,,285',
'285,286,,285,285,,285,286,,,,286,286,,286,286,,,,286,286,286,286,285',
'286,,286,,,285,,285,,285,285,,285,285,285,,285,285,,,,,285,285,,,285',
',,285,285,,,,,284,284,285,,284,284,,284,285,,,,285,285,,285,285,,,,285',
'285,285,285,284,285,,285,,,284,,284,,284,284,,284,284,284,,284,284,',
',,,284,284,,,284,,,284,284,,,,,,,284,,,,,,284,,,,284,284,,284,284,,',
',284,284,284,284,,284,,284,125,125,,,125,125,,125,223,223,223,223,,223',
'223,223,,223,,223,223,,,,125,125,,223,223,223,125,,125,223,125,125,',
'125,125,125,,125,125,125,125,223,223,125,125,,,125,,,125,125,,,223,223',
'223,223,125,223,,,,,125,,,,125,125,,125,125,,,,125,125,125,125,,125',
',125,236,236,,,236,236,,236,236,204,,,,,,,,,,,,,,204,236,204,,204,204',
',236,,236,,236,236,,236,236,236,,236,236,236,236,,,236,236,204,,236',
',,236,236,,,,,,,236,,204,204,,,236,,,204,236,236,,236,236,,,,236,236',
'236,236,,236,,236,250,250,,,250,250,,250,250,203,,,,,,,,,,,,,,203,250',
'203,,203,203,,250,,250,,250,250,,250,250,250,,250,250,250,250,,,250',
'250,203,,250,,,250,250,,,,,,,250,,203,203,,,250,,,203,250,250,,250,250',
',,,250,250,250,250,,250,,250,251,251,,,251,251,,251,251,,,,,,,,,,,,',
',,,251,,,,,,251,,251,,251,251,,251,251,251,,251,251,251,251,,,251,251',
',,251,,,251,251,,,,,269,269,251,,269,269,,269,251,,,,251,251,,251,251',
',,,251,251,251,251,269,251,,251,,,269,,269,,269,269,,269,269,269,,269',
'269,269,269,,,269,269,,,269,,,269,269,,,,,264,264,269,,264,264,,264',
'269,,,,269,269,,269,269,,,,269,269,269,269,264,269,,269,,,264,,264,',
'264,264,,264,264,264,,264,264,264,264,,,264,264,,,264,,,264,264,,,,',
',,264,,,,,,264,,,,264,264,,264,264,,,,264,264,264,264,,264,,264,263',
'263,,,263,263,,263,263,,,,,,,,,,,,,,,,263,,,,,,263,,263,,263,263,,263',
'263,263,,263,263,263,263,,,263,263,,,263,,,263,263,,,,,252,252,263,',
'252,252,,252,263,,,,263,263,,263,263,,,,263,263,263,263,252,263,,263',
',,252,,252,,252,252,,252,252,252,,252,252,,,,,252,252,,,252,,,252,252',
',,,,259,259,252,,259,259,,259,252,,,,252,252,,252,252,,,,252,252,252',
'252,259,252,,252,,,259,,259,,259,259,,259,259,259,,259,259,259,259,',
',259,259,,,259,,,259,259,,,,,,,259,,,,,,259,,,,259,259,,259,259,129',
',129,259,259,259,259,,259,,259,,129,129,129,,129,,129,129,,129,129,129',
'129,,49,49,,,49,,,,,,,,,,129,,,,129,129,,,129,129,129,129,129,129,,129',
'129,128,,128,,,129,,,49,,,49,128,128,128,,128,,128,128,,128,128,128',
'128,,,129,,,,49,,,,,,,,,128,49,49,,128,128,,,128,128,128,128,128,128',
',128,128,126,,126,,,128,,,,,,,126,126,126,,126,,126,126,,126,126,126',
'126,,,128,,,,,,,,,,,,,126,,,,126,126,,,126,126,126,126,126,126,229,126',
'126,,,,,,126,,,,229,229,229,229,229,,229,229,,229,229,229,229,,,,,,126',
',,,,,,,,,229,,,,229,229,,224,229,229,229,229,229,229,,229,229,,,224',
'224,224,229,224,,224,224,,224,224,224,224,,,,,,,,,,,,,229,,,224,,,,224',
'224,,357,224,224,224,224,224,224,,224,224,,,357,357,357,224,357,,357',
'357,,357,357,357,357,,,,,,,,,,,,,224,,,357,,,,357,357,,358,357,357,357',
'357,357,357,,357,357,,,358,358,358,357,358,,358,358,,358,358,358,358',
',,,,,,,,,,,,357,,,358,,,,358,358,,,358,358,358,358,358,358,216,358,358',
',,216,,,358,,,,216,216,216,,216,,216,216,,216,216,216,216,,,,,,358,',
',,,,,,,,216,,,,216,216,,158,216,216,216,216,216,216,,216,216,,,158,158',
'158,216,158,,158,158,,158,158,158,158,,,,,,,,,,,,,216,,,158,,,,158,158',
',359,158,158,158,158,158,158,,158,158,,,359,359,359,158,359,,359,359',
',359,359,359,359,,158,158,,,,,,,,,,158,,,359,,,,359,359,,215,359,359',
'359,359,359,359,,359,359,,,215,215,215,359,215,,215,215,214,215,215',
'215,215,,,,,,,,214,214,214,,214,359,214,214,215,214,214,214,214,215',
',,215,215,215,215,215,215,,215,215,,,,214,,215,,,,,213,214,214,214,214',
'214,214,,214,214,,,,213,213,214,213,215,213,213,212,213,,,,,,,,,,,,212',
'212,,212,214,212,212,213,212,,,,211,,,213,213,213,213,213,213,,213,213',
',211,211,212,211,213,211,211,,211,,212,212,212,212,212,212,,212,212',
',,,,,212,,213,211,,,,,,,,211,211,211,211,211,211,170,211,211,,,212,',
',211,,,,170,170,170,170,170,,170,170,210,170,170,170,170,,,,,,211,,',
'210,210,,210,,210,210,170,210,,,170,170,,209,170,170,170,170,170,170',
',170,170,,,,210,209,170,209,,209,209,360,210,210,210,210,210,210,,210',
'210,,,360,360,360,210,360,170,360,360,209,360,360,360,360,,,,209,209',
'209,209,209,209,,209,209,210,,,360,,209,,360,360,,208,360,360,360,360',
'360,360,,360,360,,,,,208,360,208,209,208,208,207,,,,,,,,,,,,,,207,,207',
'360,207,207,208,,,,,,,206,208,208,208,208,208,208,,208,208,,,,207,206',
'208,206,,206,206,361,207,207,207,207,,,,207,207,,,361,361,361,207,361',
'208,361,361,206,361,361,361,361,,,,206,206,206,206,,,,206,206,207,,',
'361,,206,,361,361,,377,361,361,361,361,361,361,,361,361,,,377,377,377',
'361,377,206,377,377,,377,377,377,377,,,,,,,,,,,,,361,,,377,,,,377,377',
',9,377,377,377,377,377,377,,377,377,,,9,9,9,377,9,202,9,9,,9,9,9,9,',
',,,,,202,,202,,202,202,377,,,9,,,,9,9,,,9,9,9,9,9,9,,9,9,202,,,,,9,',
'196,,,202,202,,,,202,202,,,196,196,196,202,196,201,196,196,9,196,196',
'196,196,,,,,,,201,,201,,201,201,202,256,256,196,,256,,196,196,,,196',
'196,196,196,196,196,,196,196,201,,,,,196,,,,,201,201,,,,201,201,,,,256',
',201,256,,,,196,,,281,281,281,281,,281,281,281,,281,,281,281,256,201',
',,,,281,281,281,,256,256,281,,,,,,,,,,,,281,281,,,,,,,,,,,,281,281,281',
'281,,281,314,314,314,314,,314,314,314,,314,,314,314,,,,,,,314,314,314',
',,,314,,,,,,,,,,,,314,314,,,,,,,,,,,,314,314,314,314,,314,283,283,283',
'283,,283,283,283,,283,,283,283,,,,,,,283,283,283,,,,283,,,,,,,,,,,,283',
'283,,,,,,,,,,,,283,283,283,283,,283' ]
        racc_action_check = arr = ::Array.new(6865, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
    -2,   396,   nil,   nil,   118,   376,   nil,   173,   376,  6539,
   474,   534,   248,   nil,   nil,   682,   742,   802,   862,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   296,   328,  1042,  1102,  1162,   321,    97,  5625,
    63,   nil,   nil,   nil,   nil,  1462,  1522,  1610,   nil,   nil,
   nil,   nil,   nil,  1670,   nil,   -70,   247,   nil,  1878,   nil,
   nil,   314,  1998,   277,  2118,  2178,  2238,  2298,  2358,  2418,
  2478,  2538,  2598,  2686,  2746,  2806,  2866,  2926,  2986,  3046,
  3106,  3166,  3226,  3286,  3346,  3406,  3466,  3526,  3586,  3646,
  3706,  3766,  3826,  3914,   243,   272,  4094,  4154,   265,   237,
  4362,   219,   nil,   nil,   nil,   nil,   nil,  1601,   210,   358,
   613,   126,   nil,   140,    80,  4930,  5708,   nil,  5651,  5594,
    67,    60,    66,   nil,    19,   nil,   nil,   nil,   nil,   nil,
   nil,   113,   nil,   153,   nil,   159,   nil,     9,   nil,   nil,
   238,   nil,   193,   nil,   nil,   167,  1818,   230,  6004,  1758,
   nil,   322,   nil,   nil,   nil,   nil,   338,   350,   357,   366,
  6264,   374,  1402,     2,    -9,     5,  1342,   982,   414,   nil,
   nil,     9,   288,   188,    82,  2657,    68,    94,    -2,    24,
   nil,   nil,   nil,   nil,   nil,   nil,  6603,     5,   626,   257,
     2,  6620,  6556,  5110,  5022,   270,  6425,  6398,  6378,  6311,
  6284,  6210,  6185,  6165,  6118,  6098,  5957,   nil,   nil,  1938,
   315,   253,   nil,  4908,  5809,   260,   nil,   264,   229,  5762,
   nil,   206,   nil,   129,   nil,   nil,  5018,   nil,   230,   nil,
   nil,   nil,   nil,   nil,   214,   184,   -28,   206,   -11,   nil,
  5106,  5194,  5462,   121,   109,   282,  6646,    -8,     3,  5522,
    49,    62,   nil,  5402,  5314,   nil,   nil,   nil,   nil,  5254,
   nil,   nil,   nil,   nil,    83,   nil,   nil,   nil,   nil,    98,
   103,  6665,   116,  6777,  4842,  4782,  4722,   nil,  4662,  4602,
   163,   nil,   156,   nil,   186,   nil,   194,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   201,  4542,  6721,   217,   nil,     9,   nil,   219,
   223,   nil,   165,   285,  4482,   nil,   nil,  4422,  4302,   nil,
   239,   144,   248,   237,    -2,  4242,   nil,  4034,  3974,   277,
   nil,  4213,   nil,   nil,  2058,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   228,   128,   300,   nil,   nil,  5856,  5903,  6051,
  6331,  6445,   321,  1282,   267,   335,   nil,   nil,   333,  1222,
   nil,   nil,   nil,   325,   nil,   nil,   nil,  6492,    18,    56,
   nil,   922,   359,   336,   nil,   362,   363,   nil,   nil,   363,
   nil,   nil,   364,   622,   nil,   366,   nil,   nil,   367,   336,
   nil,   nil,   nil,   nil,   nil,   372,   nil,   nil,   nil,   nil,
   354,   nil,   266,   178,   nil,   nil,   382,   nil,   nil,   nil,
    58,   nil,   391,   nil,   392,   nil,   396,   nil,   nil,   nil,
   366,   nil,   nil,   nil,   nil ]

racc_action_default = [
    -3,  -247,    -1,    -2,    -4,    -5,    -8,   -10,   -16,   -21,
  -247,  -247,  -247,   -33,   -34,  -247,  -247,  -247,  -247,   -61,
   -62,   -63,   -64,   -65,   -66,   -67,   -68,   -69,   -70,   -71,
   -72,   -73,   -74,   -75,   -76,   -77,   -78,   -79,   -80,   -81,
   -82,   -83,   -88,   -92,  -247,  -247,  -247,  -247,  -247,  -247,
  -247,  -180,  -181,  -182,  -183,  -247,  -247,  -247,  -194,  -195,
  -196,  -197,  -198,  -247,  -200,  -247,  -213,  -216,  -247,  -221,
  -222,  -247,  -247,    -7,  -247,  -247,  -247,  -247,  -247,  -247,
  -247,  -247,  -128,  -247,  -247,  -247,  -247,  -247,  -247,  -247,
  -247,  -247,  -247,  -247,  -247,  -247,  -247,  -247,  -247,  -247,
  -247,  -247,  -247,  -247,  -247,  -123,  -246,  -246,   -22,   -23,
  -247,  -246,  -139,  -161,  -162,  -163,  -164,   -46,  -247,   -47,
   -54,  -247,   -89,  -247,  -247,  -247,  -247,   -99,  -247,  -247,
  -246,  -246,  -223,  -148,  -150,  -151,  -152,  -153,  -154,  -156,
  -157,  -246,   -14,  -223,  -185,  -223,  -187,  -247,  -190,  -191,
  -247,  -199,  -247,  -204,  -207,  -247,  -211,  -247,  -247,  -247,
   435,    -6,    -9,   -11,   -12,   -13,   -17,   -18,   -19,   -20,
  -247,  -223,  -247,   -81,   -82,   -83,  -234,  -240,  -228,  -129,
  -132,  -247,  -231,  -245,  -229,  -237,  -243,  -181,  -182,  -183,
  -227,  -232,  -233,  -235,  -236,  -238,   -59,  -247,   -36,   -37,
   -38,   -39,   -40,   -41,   -42,   -43,   -44,   -45,   -48,   -49,
   -50,   -51,   -52,   -53,   -55,   -56,  -247,   -57,  -117,  -247,
  -223,   -85,   -93,  -128,  -127,  -247,  -126,  -247,  -225,  -247,
   -28,  -246,  -165,  -247,   -58,   -94,  -247,   -97,  -223,  -168,
  -170,  -171,  -172,  -173,  -175,  -247,  -247,  -178,  -247,   -91,
  -247,  -247,  -247,  -247,  -247,  -246,  -224,  -247,  -247,  -224,
  -247,  -247,  -188,  -247,  -247,  -201,  -202,  -203,  -205,  -247,
  -208,  -209,  -210,  -212,  -223,  -214,  -217,  -219,  -220,    -8,
  -247,  -128,  -247,  -224,  -247,  -247,  -247,   -35,  -247,  -247,
  -223,  -119,  -247,   -87,  -223,  -131,  -247,  -228,  -229,  -230,
  -231,  -234,  -237,  -239,  -240,  -241,  -242,  -243,  -244,  -245,
  -124,  -125,  -247,  -226,  -128,  -247,  -142,  -247,  -166,  -223,
  -247,   -96,  -247,  -224,  -247,  -176,  -177,  -247,  -247,   -90,
  -247,  -102,  -247,  -108,  -247,  -247,  -112,  -246,  -246,  -247,
  -158,  -247,  -149,  -155,  -246,   -15,  -184,  -186,  -189,  -192,
  -193,  -206,  -247,  -247,  -223,   -26,  -130,  -135,  -133,  -134,
   -60,  -121,  -247,  -224,   -84,  -247,   -25,   -29,  -223,  -246,
  -143,  -144,  -145,  -247,   -95,   -98,  -169,  -174,  -247,  -102,
  -101,  -247,  -247,  -108,  -107,  -247,  -247,  -111,  -113,  -247,
  -140,  -141,  -247,  -247,  -159,  -247,  -215,  -218,  -247,   -30,
  -118,  -120,   -86,  -122,   -27,  -247,  -167,  -179,  -100,  -103,
  -247,  -106,  -247,  -246,  -136,  -137,  -247,  -147,  -160,   -24,
   -31,  -138,  -247,  -105,  -247,  -110,  -247,  -115,  -116,  -146,
  -225,  -104,  -109,  -114,   -32 ]

racc_goto_table = [
     2,   117,   119,   120,   122,   228,   135,   218,   137,   197,
   171,   130,   131,   151,   141,   312,   226,   226,   238,   247,
   336,   276,   342,   426,   255,   335,    73,   389,   392,   290,
   126,   128,   129,   409,   395,   260,   231,   261,   356,   384,
   108,   109,   380,   143,   145,   225,   227,   235,   217,   367,
   315,   274,   247,   370,   158,   253,   254,   339,   398,   405,
   121,   343,   376,   282,   326,   325,   258,   349,   170,   196,
   198,   199,   200,   201,   202,   203,   204,   205,   206,   207,
   208,   209,   210,   211,   212,   213,   214,   215,   216,   411,
   408,   220,   224,   224,   161,   270,   229,   142,   142,   150,
   271,     3,   268,   388,   269,   153,   267,   394,   166,   167,
   168,   169,   292,   248,   154,   156,   162,   163,   164,   165,
   272,     1,   nil,   nil,   291,   nil,   nil,   319,   247,   nil,
   322,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   316,   135,   nil,   137,   142,   130,   131,   nil,   nil,
   141,   294,   nil,   nil,   nil,   nil,   273,   nil,   119,   280,
   nil,   nil,   126,   128,   129,   340,   352,   142,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   362,   293,   nil,   nil,   365,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   279,   nil,   nil,   nil,   216,   nil,   nil,   nil,   354,
   nil,   373,   nil,   135,   nil,   137,   397,   434,   247,   351,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   320,   nil,   196,   nil,
   nil,   nil,   368,   nil,   nil,   nil,   399,   391,   391,   nil,
   330,   332,   nil,   378,   391,   nil,   nil,   nil,   nil,   nil,
   404,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   401,   nil,
   357,   358,   359,   nil,   360,   361,   nil,   nil,   nil,   391,
   nil,   371,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   135,   229,
   137,   345,   nil,   nil,   nil,   150,   350,   nil,   nil,   nil,
   377,   153,   nil,   196,   nil,   430,   nil,   nil,   nil,   nil,
   nil,   196,   nil,   427,   nil,   nil,   402,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   216,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   126,   nil,   nil,
   345,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   416,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   229,   nil,   nil,   nil,
   422,   nil,   424,   428 ]

racc_goto_check = [
     2,    10,    10,    10,    39,    13,    37,    52,    36,    19,
    11,    59,    59,    82,    59,    14,    51,    51,    44,    38,
    49,    90,    67,    50,    15,    48,     5,    61,    61,    53,
    10,    10,    10,    45,    61,    15,    60,    15,    56,    47,
     9,     9,    46,     8,     8,    55,    55,    43,    20,    16,
    63,    44,    38,    64,    10,    60,    60,    66,    12,    61,
     6,    69,    70,    15,    71,    73,    60,    77,    10,    10,
    10,    10,    10,    10,    10,    10,    10,    10,    10,    10,
    10,    10,    10,    10,    10,    10,    10,    10,    10,    47,
    46,     8,    10,    10,     5,    78,    10,     6,     6,     6,
    79,     3,    83,    49,    84,     6,    86,    67,     9,     9,
     9,     9,    15,     8,    87,    88,     6,     6,     6,     6,
    89,     1,   nil,   nil,    52,   nil,   nil,    44,    38,   nil,
    15,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    51,    37,   nil,    36,     6,    59,    59,   nil,   nil,
    59,    11,   nil,   nil,   nil,   nil,     2,   nil,    10,     2,
   nil,   nil,    10,    10,    10,    51,    15,     6,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    15,    39,   nil,   nil,    15,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,     6,   nil,   nil,   nil,    10,   nil,   nil,   nil,    11,
   nil,    15,   nil,    37,   nil,    36,    90,    14,    38,    82,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,     2,   nil,    10,   nil,
   nil,   nil,    11,   nil,   nil,   nil,    15,    51,    51,   nil,
     2,     2,   nil,    19,    51,   nil,   nil,   nil,   nil,   nil,
    15,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    52,   nil,
    10,    10,    10,   nil,    10,    10,   nil,   nil,   nil,    51,
   nil,    59,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    37,    10,
    36,     6,   nil,   nil,   nil,     6,     6,   nil,   nil,   nil,
    10,     6,   nil,    10,   nil,    13,   nil,   nil,   nil,   nil,
   nil,    10,   nil,    51,   nil,   nil,    39,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    10,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    10,   nil,   nil,
     6,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,     2,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    10,   nil,   nil,   nil,
     2,   nil,     2,     2 ]

racc_goto_pointer = [
   nil,   121,     0,   101,   nil,    22,    42,   nil,   -12,    30,
   -14,   -72,  -296,  -105,  -213,  -108,  -264,   nil,   nil,   -74,
   -54,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   -41,   -43,  -105,   -38,
   nil,   nil,   nil,   -76,  -106,  -348,  -289,  -294,  -227,  -232,
  -390,   -90,   -95,  -190,   nil,   -61,  -245,   nil,   nil,   -36,
   -75,  -310,   nil,  -181,  -264,   nil,  -198,  -234,   nil,  -196,
  -261,  -182,   nil,  -180,   nil,   nil,   nil,  -196,   -60,   -55,
   nil,   nil,   -50,   -50,   -48,   nil,   -46,    49,    49,   -36,
  -137 ]

racc_goto_default = [
   nil,   nil,   390,   nil,     4,     5,     6,     7,   nil,     8,
     9,   nil,   nil,   nil,   nil,   nil,   230,    13,    14,   334,
   nil,    19,    20,    21,    22,    23,    24,    25,    26,    27,
    28,    29,    30,    31,    32,    33,    34,    35,    36,   nil,
    42,    43,   123,   nil,   nil,   127,   nil,   nil,   nil,   nil,
   nil,   232,   nil,   nil,   105,   nil,   179,   181,   180,   112,
   nil,   nil,   111,   nil,   nil,   132,   nil,   133,   134,   138,
   239,   240,   241,   242,   243,   246,   147,   149,    58,    59,
    60,    63,   nil,   nil,   nil,   152,   nil,   nil,   nil,   nil,
   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 93, :_reduce_1,
  1, 93, :_reduce_2,
  0, 93, :_reduce_3,
  1, 94, :_reduce_4,
  1, 96, :_reduce_5,
  3, 96, :_reduce_6,
  2, 96, :_reduce_7,
  1, 97, :_reduce_8,
  3, 97, :_reduce_9,
  1, 98, :_reduce_none,
  3, 98, :_reduce_11,
  3, 98, :_reduce_12,
  3, 98, :_reduce_13,
  1, 100, :_reduce_14,
  3, 100, :_reduce_15,
  1, 99, :_reduce_none,
  3, 99, :_reduce_17,
  3, 99, :_reduce_18,
  3, 99, :_reduce_19,
  3, 99, :_reduce_20,
  1, 101, :_reduce_none,
  2, 101, :_reduce_22,
  2, 101, :_reduce_23,
  7, 101, :_reduce_24,
  5, 101, :_reduce_25,
  5, 101, :_reduce_26,
  4, 108, :_reduce_27,
  1, 105, :_reduce_28,
  3, 105, :_reduce_29,
  1, 104, :_reduce_30,
  2, 104, :_reduce_31,
  4, 104, :_reduce_32,
  1, 102, :_reduce_none,
  1, 102, :_reduce_none,
  4, 102, :_reduce_35,
  3, 102, :_reduce_36,
  3, 102, :_reduce_37,
  3, 102, :_reduce_38,
  3, 102, :_reduce_39,
  3, 102, :_reduce_40,
  3, 102, :_reduce_41,
  3, 102, :_reduce_42,
  3, 102, :_reduce_43,
  3, 102, :_reduce_44,
  3, 102, :_reduce_45,
  2, 102, :_reduce_46,
  2, 102, :_reduce_47,
  3, 102, :_reduce_48,
  3, 102, :_reduce_49,
  3, 102, :_reduce_50,
  3, 102, :_reduce_51,
  3, 102, :_reduce_52,
  3, 102, :_reduce_53,
  2, 102, :_reduce_54,
  3, 102, :_reduce_55,
  3, 102, :_reduce_56,
  3, 102, :_reduce_57,
  3, 102, :_reduce_58,
  1, 111, :_reduce_59,
  3, 111, :_reduce_60,
  1, 109, :_reduce_none,
  1, 109, :_reduce_none,
  1, 109, :_reduce_none,
  1, 109, :_reduce_none,
  1, 109, :_reduce_none,
  1, 109, :_reduce_none,
  1, 109, :_reduce_none,
  1, 109, :_reduce_none,
  1, 109, :_reduce_none,
  1, 109, :_reduce_none,
  1, 109, :_reduce_none,
  1, 109, :_reduce_none,
  1, 109, :_reduce_none,
  1, 109, :_reduce_none,
  1, 109, :_reduce_none,
  1, 109, :_reduce_none,
  1, 109, :_reduce_none,
  1, 109, :_reduce_none,
  1, 109, :_reduce_79,
  1, 109, :_reduce_80,
  1, 109, :_reduce_81,
  1, 109, :_reduce_82,
  1, 109, :_reduce_83,
  5, 110, :_reduce_84,
  3, 110, :_reduce_85,
  6, 110, :_reduce_86,
  4, 110, :_reduce_87,
  1, 114, :_reduce_88,
  2, 114, :_reduce_89,
  4, 132, :_reduce_90,
  3, 132, :_reduce_91,
  1, 132, :_reduce_92,
  3, 133, :_reduce_93,
  2, 131, :_reduce_94,
  3, 135, :_reduce_95,
  2, 135, :_reduce_96,
  2, 134, :_reduce_97,
  4, 134, :_reduce_98,
  2, 117, :_reduce_99,
  5, 137, :_reduce_100,
  4, 137, :_reduce_101,
  0, 138, :_reduce_none,
  2, 138, :_reduce_103,
  4, 138, :_reduce_104,
  3, 138, :_reduce_105,
  6, 118, :_reduce_106,
  5, 118, :_reduce_107,
  0, 139, :_reduce_none,
  4, 139, :_reduce_109,
  3, 139, :_reduce_110,
  5, 116, :_reduce_111,
  1, 140, :_reduce_112,
  2, 140, :_reduce_113,
  5, 141, :_reduce_114,
  1, 142, :_reduce_none,
  1, 142, :_reduce_none,
  1, 112, :_reduce_none,
  4, 112, :_reduce_118,
  1, 145, :_reduce_119,
  3, 145, :_reduce_120,
  3, 144, :_reduce_121,
  6, 115, :_reduce_122,
  2, 115, :_reduce_123,
  3, 146, :_reduce_124,
  3, 146, :_reduce_125,
  1, 147, :_reduce_none,
  1, 147, :_reduce_none,
  0, 103, :_reduce_128,
  1, 103, :_reduce_129,
  3, 103, :_reduce_130,
  1, 149, :_reduce_none,
  1, 149, :_reduce_none,
  3, 148, :_reduce_133,
  3, 148, :_reduce_134,
  3, 148, :_reduce_135,
  6, 119, :_reduce_136,
  6, 120, :_reduce_137,
  7, 121, :_reduce_138,
  1, 154, :_reduce_139,
  1, 153, :_reduce_none,
  1, 153, :_reduce_none,
  1, 155, :_reduce_none,
  2, 155, :_reduce_143,
  1, 156, :_reduce_none,
  1, 156, :_reduce_none,
  7, 122, :_reduce_146,
  6, 122, :_reduce_147,
  1, 157, :_reduce_148,
  3, 157, :_reduce_149,
  1, 159, :_reduce_none,
  1, 159, :_reduce_none,
  1, 159, :_reduce_152,
  1, 159, :_reduce_none,
  1, 160, :_reduce_154,
  3, 160, :_reduce_155,
  1, 161, :_reduce_none,
  1, 161, :_reduce_none,
  1, 158, :_reduce_none,
  2, 158, :_reduce_159,
  6, 124, :_reduce_160,
  1, 151, :_reduce_none,
  1, 151, :_reduce_none,
  1, 151, :_reduce_none,
  1, 151, :_reduce_164,
  1, 152, :_reduce_165,
  2, 152, :_reduce_166,
  4, 152, :_reduce_167,
  1, 136, :_reduce_168,
  3, 136, :_reduce_169,
  1, 162, :_reduce_none,
  1, 162, :_reduce_none,
  1, 163, :_reduce_none,
  1, 163, :_reduce_none,
  3, 165, :_reduce_174,
  1, 165, :_reduce_175,
  2, 166, :_reduce_176,
  2, 164, :_reduce_177,
  1, 167, :_reduce_178,
  4, 167, :_reduce_179,
  1, 113, :_reduce_180,
  1, 125, :_reduce_181,
  1, 125, :_reduce_182,
  1, 125, :_reduce_183,
  4, 126, :_reduce_184,
  2, 126, :_reduce_185,
  4, 126, :_reduce_186,
  2, 126, :_reduce_187,
  3, 127, :_reduce_188,
  4, 127, :_reduce_189,
  2, 127, :_reduce_190,
  1, 168, :_reduce_191,
  3, 168, :_reduce_192,
  3, 169, :_reduce_193,
  1, 129, :_reduce_none,
  1, 129, :_reduce_none,
  1, 129, :_reduce_none,
  1, 170, :_reduce_197,
  1, 170, :_reduce_198,
  2, 171, :_reduce_199,
  1, 173, :_reduce_200,
  1, 175, :_reduce_201,
  1, 176, :_reduce_202,
  2, 174, :_reduce_203,
  1, 177, :_reduce_204,
  1, 178, :_reduce_205,
  2, 178, :_reduce_206,
  2, 172, :_reduce_207,
  2, 179, :_reduce_208,
  2, 179, :_reduce_209,
  3, 95, :_reduce_210,
  0, 181, :_reduce_none,
  1, 181, :_reduce_none,
  0, 180, :_reduce_213,
  2, 180, :_reduce_214,
  4, 180, :_reduce_215,
  1, 123, :_reduce_216,
  3, 123, :_reduce_217,
  5, 123, :_reduce_218,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 130, :_reduce_221,
  1, 128, :_reduce_222,
  0, 107, :_reduce_none,
  1, 107, :_reduce_224,
  0, 106, :_reduce_none,
  1, 106, :_reduce_none,
  1, 150, :_reduce_none,
  1, 150, :_reduce_none,
  1, 150, :_reduce_none,
  1, 150, :_reduce_none,
  1, 150, :_reduce_none,
  1, 150, :_reduce_none,
  1, 150, :_reduce_none,
  1, 150, :_reduce_none,
  1, 150, :_reduce_none,
  1, 150, :_reduce_none,
  1, 150, :_reduce_none,
  1, 150, :_reduce_none,
  1, 150, :_reduce_none,
  1, 150, :_reduce_none,
  1, 150, :_reduce_none,
  1, 150, :_reduce_none,
  1, 150, :_reduce_none,
  1, 150, :_reduce_none,
  1, 150, :_reduce_none,
  0, 143, :_reduce_246 ]

racc_reduce_n = 247

racc_shift_n = 435

racc_token_table = {
  false => 0,
  :error => 1,
  :STRING => 2,
  :DQPRE => 3,
  :DQMID => 4,
  :DQPOST => 5,
  :WORD => 6,
  :LBRACK => 7,
  :RBRACK => 8,
  :LBRACE => 9,
  :RBRACE => 10,
  :SYMBOL => 11,
  :FARROW => 12,
  :COMMA => 13,
  :TRUE => 14,
  :FALSE => 15,
  :EQUALS => 16,
  :APPENDS => 17,
  :DELETES => 18,
  :LESSEQUAL => 19,
  :NOTEQUAL => 20,
  :DOT => 21,
  :COLON => 22,
  :LLCOLLECT => 23,
  :RRCOLLECT => 24,
  :QMARK => 25,
  :LPAREN => 26,
  :RPAREN => 27,
  :ISEQUAL => 28,
  :GREATEREQUAL => 29,
  :GREATERTHAN => 30,
  :LESSTHAN => 31,
  :IF => 32,
  :ELSE => 33,
  :DEFINE => 34,
  :ELSIF => 35,
  :VARIABLE => 36,
  :CLASS => 37,
  :INHERITS => 38,
  :NODE => 39,
  :BOOLEAN => 40,
  :NAME => 41,
  :SEMIC => 42,
  :CASE => 43,
  :DEFAULT => 44,
  :AT => 45,
  :ATAT => 46,
  :LCOLLECT => 47,
  :RCOLLECT => 48,
  :CLASSREF => 49,
  :NOT => 50,
  :OR => 51,
  :AND => 52,
  :UNDEF => 53,
  :PARROW => 54,
  :PLUS => 55,
  :MINUS => 56,
  :TIMES => 57,
  :DIV => 58,
  :LSHIFT => 59,
  :RSHIFT => 60,
  :UMINUS => 61,
  :MATCH => 62,
  :NOMATCH => 63,
  :REGEX => 64,
  :IN_EDGE => 65,
  :OUT_EDGE => 66,
  :IN_EDGE_SUB => 67,
  :OUT_EDGE_SUB => 68,
  :IN => 69,
  :UNLESS => 70,
  :PIPE => 71,
  :LAMBDA => 72,
  :SELBRACE => 73,
  :NUMBER => 74,
  :HEREDOC => 75,
  :SUBLOCATE => 76,
  :RENDER_STRING => 77,
  :RENDER_EXPR => 78,
  :EPP_START => 79,
  :EPP_END => 80,
  :EPP_END_TRIM => 81,
  :FUNCTION => 82,
  :PRIVATE => 83,
  :ATTR => 84,
  :TYPE => 85,
  :LOW => 86,
  :APPLICATION => 87,
  :HIGH => 88,
  :LISTSTART => 89,
  :SPLAT => 90,
  :MODULO => 91 }

racc_nt_base = 92

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "STRING",
  "DQPRE",
  "DQMID",
  "DQPOST",
  "WORD",
  "LBRACK",
  "RBRACK",
  "LBRACE",
  "RBRACE",
  "SYMBOL",
  "FARROW",
  "COMMA",
  "TRUE",
  "FALSE",
  "EQUALS",
  "APPENDS",
  "DELETES",
  "LESSEQUAL",
  "NOTEQUAL",
  "DOT",
  "COLON",
  "LLCOLLECT",
  "RRCOLLECT",
  "QMARK",
  "LPAREN",
  "RPAREN",
  "ISEQUAL",
  "GREATEREQUAL",
  "GREATERTHAN",
  "LESSTHAN",
  "IF",
  "ELSE",
  "DEFINE",
  "ELSIF",
  "VARIABLE",
  "CLASS",
  "INHERITS",
  "NODE",
  "BOOLEAN",
  "NAME",
  "SEMIC",
  "CASE",
  "DEFAULT",
  "AT",
  "ATAT",
  "LCOLLECT",
  "RCOLLECT",
  "CLASSREF",
  "NOT",
  "OR",
  "AND",
  "UNDEF",
  "PARROW",
  "PLUS",
  "MINUS",
  "TIMES",
  "DIV",
  "LSHIFT",
  "RSHIFT",
  "UMINUS",
  "MATCH",
  "NOMATCH",
  "REGEX",
  "IN_EDGE",
  "OUT_EDGE",
  "IN_EDGE_SUB",
  "OUT_EDGE_SUB",
  "IN",
  "UNLESS",
  "PIPE",
  "LAMBDA",
  "SELBRACE",
  "NUMBER",
  "HEREDOC",
  "SUBLOCATE",
  "RENDER_STRING",
  "RENDER_EXPR",
  "EPP_START",
  "EPP_END",
  "EPP_END_TRIM",
  "FUNCTION",
  "PRIVATE",
  "ATTR",
  "TYPE",
  "LOW",
  "APPLICATION",
  "HIGH",
  "LISTSTART",
  "SPLAT",
  "MODULO",
  "$start",
  "program",
  "statements",
  "epp_expression",
  "syntactic_statements",
  "syntactic_statement",
  "assignment",
  "relationship",
  "assignments",
  "resource",
  "expression",
  "attribute_operations",
  "additional_resource_bodies",
  "resource_bodies",
  "endsemi",
  "endcomma",
  "resource_body",
  "primary_expression",
  "call_function_expression",
  "expressions",
  "selector_entries",
  "variable",
  "call_method_with_lambda_expression",
  "collection_expression",
  "case_expression",
  "if_expression",
  "unless_expression",
  "definition_expression",
  "application_expression",
  "hostclass_expression",
  "node_definition_expression",
  "epp_render_expression",
  "function_definition",
  "reserved_word",
  "array",
  "hash",
  "regex",
  "quotedtext",
  "type",
  "lambda",
  "call_method_expression",
  "named_access",
  "lambda_parameter_list",
  "lambda_rest",
  "parameters",
  "if_part",
  "else",
  "unless_else",
  "case_options",
  "case_option",
  "options_statements",
  "nil",
  "selector_entry",
  "selector_entry_list",
  "collect_query",
  "optional_query",
  "attribute_operation",
  "attribute_name",
  "keyword",
  "classname",
  "parameter_list",
  "opt_statements",
  "stacked_classname",
  "classparent",
  "classnameordefault",
  "hostnames",
  "nodeparent",
  "hostname",
  "dotted_name",
  "name_or_number",
  "parameter",
  "untyped_parameter",
  "typed_parameter",
  "regular_parameter",
  "splat_parameter",
  "parameter_type",
  "hashpairs",
  "hashpair",
  "string",
  "dq_string",
  "heredoc",
  "dqpre",
  "dqrval",
  "dqpost",
  "dqmid",
  "text_expression",
  "dqtail",
  "sublocated_text",
  "epp_parameters_list",
  "optional_statements",
  "epp_end" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'egrammar.ra', 67)
  def _reduce_1(val, _values, result)
     result = create_program(Factory.block_or_expression(*val[0])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 68)
  def _reduce_2(val, _values, result)
     result = create_program(Factory.block_or_expression(*val[0])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 69)
  def _reduce_3(val, _values, result)
     result = create_empty_program() 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 73)
  def _reduce_4(val, _values, result)
     result = transform_calls(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 80)
  def _reduce_5(val, _values, result)
     result = [val[0]]
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 81)
  def _reduce_6(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 82)
  def _reduce_7(val, _values, result)
     result = val[0].push val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 89)
  def _reduce_8(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 90)
  def _reduce_9(val, _values, result)
     result = aryfy(val[0]).push(val[1]).push(val[2]) 
    result
  end
.,.,

# reduce 10 omitted

module_eval(<<'.,.,', 'egrammar.ra', 95)
  def _reduce_11(val, _values, result)
     result = val[0].set(val[2])      ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 96)
  def _reduce_12(val, _values, result)
     result = val[0].plus_set(val[2]) ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 97)
  def _reduce_13(val, _values, result)
     result = val[0].minus_set(val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 100)
  def _reduce_14(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 101)
  def _reduce_15(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 16 omitted

module_eval(<<'.,.,', 'egrammar.ra', 105)
  def _reduce_17(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 106)
  def _reduce_18(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 107)
  def _reduce_19(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 108)
  def _reduce_20(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

# reduce 21 omitted

module_eval(<<'.,.,', 'egrammar.ra', 117)
  def _reduce_22(val, _values, result)
          result = val[1]
      unless Factory.set_resource_form(result, :virtual)
        # This is equivalent to a syntax error - additional semantic restrictions apply
        error val[0], "Virtual (@) can only be applied to a Resource Expression"
      end
      # relocate the result
      loc result, val[0], val[1]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 128)
  def _reduce_23(val, _values, result)
          result = val[1]
      unless Factory.set_resource_form(result, :exported)
        # This is equivalent to a syntax error - additional semantic restrictions apply
        error val[0], "Exported (@@) can only be applied to a Resource Expression"
      end
      # relocate the result
      loc result, val[0], val[1]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 139)
  def _reduce_24(val, _values, result)
          bodies = [Factory.RESOURCE_BODY(val[2], val[4])] + val[5]
      result = Factory.RESOURCE(val[0], bodies)
      loc result, val[0], val[6]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 146)
  def _reduce_25(val, _values, result)
            result = Factory.RESOURCE(Factory.fqn(token_text(val[0])), val[2])
        loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 155)
  def _reduce_26(val, _values, result)
           result = case Factory.resource_shape(val[0])
       when :resource, :class
        # This catches deprecated syntax.
        # If the attribute operations does not include +>, then the found expression
        # is actually a LEFT followed by LITERAL_HASH
        #
        unless tmp = transform_resource_wo_title(val[0], val[2])
          error val[1], "Syntax error resource body without title or hash with +>"
        end
        tmp
      when :defaults
        Factory.RESOURCE_DEFAULTS(val[0], val[2])
      when :override
        # This was only done for override in original - TODO should it be here at all
        Factory.RESOURCE_OVERRIDE(val[0], val[2])
      else
        error val[0], "Expression is not valid as a resource, resource-default, or resource-override"
      end
     loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 177)
  def _reduce_27(val, _values, result)
     result = Factory.RESOURCE_BODY(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 180)
  def _reduce_28(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 181)
  def _reduce_29(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 187)
  def _reduce_30(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 188)
  def _reduce_31(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 189)
  def _reduce_32(val, _values, result)
     result = val[2] 
    result
  end
.,.,

# reduce 33 omitted

# reduce 34 omitted

module_eval(<<'.,.,', 'egrammar.ra', 196)
  def _reduce_35(val, _values, result)
     result = val[0][*val[2]]         ; loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 197)
  def _reduce_36(val, _values, result)
     result = val[0].in val[2]        ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 198)
  def _reduce_37(val, _values, result)
     result = val[0] =~  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 199)
  def _reduce_38(val, _values, result)
     result = val[0].mne val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 200)
  def _reduce_39(val, _values, result)
     result = val[0] +   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 201)
  def _reduce_40(val, _values, result)
     result = val[0] -   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 202)
  def _reduce_41(val, _values, result)
     result = val[0] /   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 203)
  def _reduce_42(val, _values, result)
     result = val[0] *   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 204)
  def _reduce_43(val, _values, result)
     result = val[0] %   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 205)
  def _reduce_44(val, _values, result)
     result = val[0] <<  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 206)
  def _reduce_45(val, _values, result)
     result = val[0] >>  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 207)
  def _reduce_46(val, _values, result)
     result = val[1].minus()          ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 208)
  def _reduce_47(val, _values, result)
     result = val[1].unfold()         ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 209)
  def _reduce_48(val, _values, result)
     result = val[0].ne  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 210)
  def _reduce_49(val, _values, result)
     result = val[0] ==  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 211)
  def _reduce_50(val, _values, result)
     result = val[0] >   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 212)
  def _reduce_51(val, _values, result)
     result = val[0] >=  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 213)
  def _reduce_52(val, _values, result)
     result = val[0] <   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 214)
  def _reduce_53(val, _values, result)
     result = val[0] <=  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 215)
  def _reduce_54(val, _values, result)
     result = val[1].not              ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 216)
  def _reduce_55(val, _values, result)
     result = val[0].and val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 217)
  def _reduce_56(val, _values, result)
     result = val[0].or  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 218)
  def _reduce_57(val, _values, result)
     result = val[0].select(*val[2])  ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 219)
  def _reduce_58(val, _values, result)
     result = val[1].paren()          ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 229)
  def _reduce_59(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 230)
  def _reduce_60(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 61 omitted

# reduce 62 omitted

# reduce 63 omitted

# reduce 64 omitted

# reduce 65 omitted

# reduce 66 omitted

# reduce 67 omitted

# reduce 68 omitted

# reduce 69 omitted

# reduce 70 omitted

# reduce 71 omitted

# reduce 72 omitted

# reduce 73 omitted

# reduce 74 omitted

# reduce 75 omitted

# reduce 76 omitted

# reduce 77 omitted

# reduce 78 omitted

module_eval(<<'.,.,', 'egrammar.ra', 253)
  def _reduce_79(val, _values, result)
     result = Factory.NUMBER(val[0][:value])          ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 254)
  def _reduce_80(val, _values, result)
     result = Factory.literal(val[0][:value])         ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 255)
  def _reduce_81(val, _values, result)
     result = Factory.literal(:default)               ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 256)
  def _reduce_82(val, _values, result)
     result = Factory.literal(:undef)                 ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 257)
  def _reduce_83(val, _values, result)
     result = Factory.QNAME_OR_NUMBER(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 266)
  def _reduce_84(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, val[2])
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 270)
  def _reduce_85(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, [])
      loc result, val[0], val[2]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 274)
  def _reduce_86(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, val[2])
      loc result, val[0], val[4]
      result.lambda = val[5]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 279)
  def _reduce_87(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, [])
      loc result, val[0], val[2]
      result.lambda = val[3]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 287)
  def _reduce_88(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 288)
  def _reduce_89(val, _values, result)
     result = val[0]; val[0].lambda = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 291)
  def _reduce_90(val, _values, result)
     result = Factory.CALL_METHOD(val[0], val[2]); loc result, val[1], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 292)
  def _reduce_91(val, _values, result)
     result = Factory.CALL_METHOD(val[0], []); loc result, val[1], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 293)
  def _reduce_92(val, _values, result)
     result = Factory.CALL_METHOD(val[0], []); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 297)
  def _reduce_93(val, _values, result)
            result = val[0].dot(Factory.fqn(val[2][:value]))
        loc result, val[1], val[2]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 305)
  def _reduce_94(val, _values, result)
          result = Factory.LAMBDA(val[0][:value], val[1][:value])
      loc result, val[0][:start], val[1][:end]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 310)
  def _reduce_95(val, _values, result)
     result = {:end => val[2], :value =>val[1] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 311)
  def _reduce_96(val, _values, result)
     result = {:end => val[1], :value => nil } 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 315)
  def _reduce_97(val, _values, result)
     result = {:start => val[0], :value => [] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 316)
  def _reduce_98(val, _values, result)
     result = {:start => val[0], :value => val[1] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 324)
  def _reduce_99(val, _values, result)
          result = val[1]
      loc(result, val[0], val[1])
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 331)
  def _reduce_100(val, _values, result)
            result = Factory.IF(val[0], Factory.block_or_expression(*val[2]), val[4])
        loc(result, val[0], (val[4] ? val[4] : val[3]))
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 335)
  def _reduce_101(val, _values, result)
            result = Factory.IF(val[0], nil, val[3])
        loc(result, val[0], (val[3] ? val[3] : val[2]))
      
    result
  end
.,.,

# reduce 102 omitted

module_eval(<<'.,.,', 'egrammar.ra', 343)
  def _reduce_103(val, _values, result)
            result = val[1]
        loc(result, val[0], val[1])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 347)
  def _reduce_104(val, _values, result)
            result = Factory.block_or_expression(*val[2])
        loc result, val[0], val[3]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 351)
  def _reduce_105(val, _values, result)
            result = nil # don't think a nop is needed here either
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 358)
  def _reduce_106(val, _values, result)
          result = Factory.UNLESS(val[1], Factory.block_or_expression(*val[3]), val[5])
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 362)
  def _reduce_107(val, _values, result)
          result = Factory.UNLESS(val[1], nil, val[4])
      loc result, val[0], val[4]
    
    result
  end
.,.,

# reduce 108 omitted

module_eval(<<'.,.,', 'egrammar.ra', 372)
  def _reduce_109(val, _values, result)
            result = Factory.block_or_expression(*val[2])
        loc result, val[0], val[3]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 376)
  def _reduce_110(val, _values, result)
            result = nil # don't think a nop is needed here either
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 383)
  def _reduce_111(val, _values, result)
          result = Factory.CASE(val[1], *val[3])
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 389)
  def _reduce_112(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 390)
  def _reduce_113(val, _values, result)
     result = val[0].push val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 395)
  def _reduce_114(val, _values, result)
            result = Factory.WHEN(val[0], val[3]); loc result, val[1], val[4]
      
    result
  end
.,.,

# reduce 115 omitted

# reduce 116 omitted

# reduce 117 omitted

module_eval(<<'.,.,', 'egrammar.ra', 411)
  def _reduce_118(val, _values, result)
            result = val[1]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 416)
  def _reduce_119(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 417)
  def _reduce_120(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 422)
  def _reduce_121(val, _values, result)
     result = Factory.MAP(val[0], val[2]) ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 432)
  def _reduce_122(val, _values, result)
          result = Factory.COLLECT(val[0], val[1], val[3])
      loc result, val[0], val[5]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 436)
  def _reduce_123(val, _values, result)
          result = Factory.COLLECT(val[0], val[1], [])
      loc result, val[0], val[1]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 441)
  def _reduce_124(val, _values, result)
     result = Factory.VIRTUAL_QUERY(val[1])   ; loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 442)
  def _reduce_125(val, _values, result)
     result = Factory.EXPORTED_QUERY(val[1])  ; loc result, val[0], val[2] 
    result
  end
.,.,

# reduce 126 omitted

# reduce 127 omitted

module_eval(<<'.,.,', 'egrammar.ra', 451)
  def _reduce_128(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 452)
  def _reduce_129(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 453)
  def _reduce_130(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 131 omitted

# reduce 132 omitted

module_eval(<<'.,.,', 'egrammar.ra', 469)
  def _reduce_133(val, _values, result)
            result = Factory.ATTRIBUTE_OP(val[0][:value], :'=>', val[2])
        loc result, val[0], val[2]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 473)
  def _reduce_134(val, _values, result)
            result = Factory.ATTRIBUTE_OP(val[0][:value], :'+>', val[2])
        loc result, val[0], val[2]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 477)
  def _reduce_135(val, _values, result)
          result = Factory.ATTRIBUTES_OP(val[2]) ; loc result, val[0], val[2]
   
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 486)
  def _reduce_136(val, _values, result)
          result = add_definition(Factory.DEFINITION(classname(val[1][:value]), val[2], val[4]))
      loc result, val[0], val[5]
      # New lexer does not keep track of this, this is done in validation
      if @lexer.respond_to?(:'indefine=')
        @lexer.indefine = false
      end
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 497)
  def _reduce_137(val, _values, result)
        result = Factory.APPLICATION(classname(val[1][:value]), val[2], val[4])
    loc result, val[0], val[5]
  
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 507)
  def _reduce_138(val, _values, result)
          # Remove this class' name from the namestack as all nested classes have been parsed
      namepop
      result = add_definition(Factory.HOSTCLASS(classname(val[1][:value]), val[2], token_text(val[3]), val[5]))
      loc result, val[0], val[6]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 517)
  def _reduce_139(val, _values, result)
     namestack(val[0][:value]) ; result = val[0] 
    result
  end
.,.,

# reduce 140 omitted

# reduce 141 omitted

# reduce 142 omitted

module_eval(<<'.,.,', 'egrammar.ra', 526)
  def _reduce_143(val, _values, result)
     result = val[1] 
    result
  end
.,.,

# reduce 144 omitted

# reduce 145 omitted

module_eval(<<'.,.,', 'egrammar.ra', 543)
  def _reduce_146(val, _values, result)
          result = add_definition(Factory.NODE(val[1], val[3], val[5]))
      loc result, val[0], val[6]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 547)
  def _reduce_147(val, _values, result)
          result = add_definition(Factory.NODE(val[1], val[3], nil))
      loc result, val[0], val[5]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 557)
  def _reduce_148(val, _values, result)
     result = [result] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 558)
  def _reduce_149(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 150 omitted

# reduce 151 omitted

module_eval(<<'.,.,', 'egrammar.ra', 565)
  def _reduce_152(val, _values, result)
     result = Factory.literal(:default); loc result, val[0] 
    result
  end
.,.,

# reduce 153 omitted

module_eval(<<'.,.,', 'egrammar.ra', 569)
  def _reduce_154(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 570)
  def _reduce_155(val, _values, result)
     result = Factory.concat(val[0], '.', val[2][:value]); loc result, val[0], val[2] 
    result
  end
.,.,

# reduce 156 omitted

# reduce 157 omitted

# reduce 158 omitted

module_eval(<<'.,.,', 'egrammar.ra', 579)
  def _reduce_159(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 585)
  def _reduce_160(val, _values, result)
          result = add_definition(Factory.FUNCTION(val[1][:value], val[2], val[4]))
      loc result, val[0], val[5]
    
    result
  end
.,.,

# reduce 161 omitted

# reduce 162 omitted

# reduce 163 omitted

module_eval(<<'.,.,', 'egrammar.ra', 596)
  def _reduce_164(val, _values, result)
     error val[0], "'class' is not a valid classname" 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 600)
  def _reduce_165(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 601)
  def _reduce_166(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 602)
  def _reduce_167(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 606)
  def _reduce_168(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 607)
  def _reduce_169(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 170 omitted

# reduce 171 omitted

# reduce 172 omitted

# reduce 173 omitted

module_eval(<<'.,.,', 'egrammar.ra', 619)
  def _reduce_174(val, _values, result)
     result = Factory.PARAM(val[0][:value], val[2]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 620)
  def _reduce_175(val, _values, result)
     result = Factory.PARAM(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 623)
  def _reduce_176(val, _values, result)
     result = val[1]; val[1].captures_rest() 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 626)
  def _reduce_177(val, _values, result)
     val[1].type_expr(val[0]) ; result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 629)
  def _reduce_178(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 630)
  def _reduce_179(val, _values, result)
     result = val[0][*val[2]] ; loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 635)
  def _reduce_180(val, _values, result)
     result = Factory.fqn(val[0][:value]).var ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 640)
  def _reduce_181(val, _values, result)
     result = Factory.RESERVED(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 641)
  def _reduce_182(val, _values, result)
     result = Factory.RESERVED(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 642)
  def _reduce_183(val, _values, result)
     result = Factory.RESERVED(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 648)
  def _reduce_184(val, _values, result)
     result = Factory.LIST(val[1]); loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 649)
  def _reduce_185(val, _values, result)
     result = Factory.literal([]) ; loc result, val[0], val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 650)
  def _reduce_186(val, _values, result)
     result = Factory.LIST(val[1]); loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 651)
  def _reduce_187(val, _values, result)
     result = Factory.literal([]) ; loc result, val[0], val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 654)
  def _reduce_188(val, _values, result)
     result = Factory.HASH(val[1]); loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 655)
  def _reduce_189(val, _values, result)
     result = Factory.HASH(val[1]); loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 656)
  def _reduce_190(val, _values, result)
     result = Factory.literal({}) ; loc result, val[0], val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 659)
  def _reduce_191(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 660)
  def _reduce_192(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 663)
  def _reduce_193(val, _values, result)
     result = Factory.KEY_ENTRY(val[0], val[2]); loc result, val[1] 
    result
  end
.,.,

# reduce 194 omitted

# reduce 195 omitted

# reduce 196 omitted

module_eval(<<'.,.,', 'egrammar.ra', 671)
  def _reduce_197(val, _values, result)
     result = Factory.literal(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 672)
  def _reduce_198(val, _values, result)
     result = Factory.literal(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 674)
  def _reduce_199(val, _values, result)
     result = Factory.string(val[0], *val[1]) ; loc result, val[0], val[1][-1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 675)
  def _reduce_200(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 676)
  def _reduce_201(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 677)
  def _reduce_202(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 678)
  def _reduce_203(val, _values, result)
     result = [val[0]] + val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 679)
  def _reduce_204(val, _values, result)
     result = Factory.TEXT(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 682)
  def _reduce_205(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 683)
  def _reduce_206(val, _values, result)
     result = [val[0]] + val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 686)
  def _reduce_207(val, _values, result)
     result = Factory.HEREDOC(val[0][:value], val[1]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 689)
  def _reduce_208(val, _values, result)
     result = Factory.SUBLOCATE(val[0], val[1]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 690)
  def _reduce_209(val, _values, result)
     result = Factory.SUBLOCATE(val[0], val[1]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 693)
  def _reduce_210(val, _values, result)
     result = Factory.EPP(val[1], val[2]); loc result, val[0] 
    result
  end
.,.,

# reduce 211 omitted

# reduce 212 omitted

module_eval(<<'.,.,', 'egrammar.ra', 700)
  def _reduce_213(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 701)
  def _reduce_214(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 702)
  def _reduce_215(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 705)
  def _reduce_216(val, _values, result)
     result = Factory.RENDER_STRING(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 706)
  def _reduce_217(val, _values, result)
     result = Factory.RENDER_EXPR(val[1]); loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 707)
  def _reduce_218(val, _values, result)
     result = Factory.RENDER_EXPR(Factory.block_or_expression(*val[2])); loc result, val[0], val[4] 
    result
  end
.,.,

# reduce 219 omitted

# reduce 220 omitted

module_eval(<<'.,.,', 'egrammar.ra', 713)
  def _reduce_221(val, _values, result)
     result = Factory.QREF(val[0][:value])  ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 716)
  def _reduce_222(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

# reduce 223 omitted

module_eval(<<'.,.,', 'egrammar.ra', 722)
  def _reduce_224(val, _values, result)
     result = nil 
    result
  end
.,.,

# reduce 225 omitted

# reduce 226 omitted

# reduce 227 omitted

# reduce 228 omitted

# reduce 229 omitted

# reduce 230 omitted

# reduce 231 omitted

# reduce 232 omitted

# reduce 233 omitted

# reduce 234 omitted

# reduce 235 omitted

# reduce 236 omitted

# reduce 237 omitted

# reduce 238 omitted

# reduce 239 omitted

# reduce 240 omitted

# reduce 241 omitted

# reduce 242 omitted

# reduce 243 omitted

# reduce 244 omitted

# reduce 245 omitted

module_eval(<<'.,.,', 'egrammar.ra', 750)
  def _reduce_246(val, _values, result)
     result = nil
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

      end   # class Parser
      end   # module Parser
    end   # module Pops
  end   # module Puppet
