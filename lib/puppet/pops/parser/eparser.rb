#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.9
# from Racc grammer file "".
#

require 'racc/parser.rb'

require 'puppet'
require 'puppet/pops'

module Puppet
  class ParseError < Puppet::Error; end
  class ImportError < Racc::ParseError; end
  class AlreadyImportedError < ImportError; end
end

module Puppet
  module Pops
    module Parser
      class Parser < Racc::Parser

module_eval(<<'...end egrammar.ra/module_eval...', 'egrammar.ra', 782)

# Make emacs happy
# Local Variables:
# mode: ruby
# End:
...end egrammar.ra/module_eval...
##### State transition tables begin ###

clist = [
'65,67,335,325,53,60,352,61,249,295,-132,-232,249,271,116,116,336,294',
'394,249,354,253,295,142,18,253,416,-241,116,250,45,295,48,250,55,12',
'-246,51,39,42,250,47,40,10,11,118,118,54,17,115,115,41,-132,-232,15',
'16,143,117,117,118,65,67,72,115,53,60,355,61,46,-241,266,117,38,68,116',
'70,71,69,-246,266,52,56,58,57,18,49,-163,-243,59,-244,45,390,48,389',
'55,120,-166,51,39,42,238,47,40,116,330,118,112,54,17,115,446,41,380',
'445,15,16,269,117,271,270,65,67,72,292,53,60,361,61,46,-243,264,-244',
'38,68,118,70,71,390,115,389,52,56,58,57,18,49,117,363,59,263,45,238',
'48,238,55,12,249,51,39,42,74,47,40,10,11,293,349,54,17,253,241,41,65',
'67,15,16,144,250,284,285,65,67,72,239,53,60,371,61,46,116,372,242,38',
'68,116,70,71,273,272,290,52,56,58,57,18,49,291,374,59,345,45,344,48',
'377,55,120,76,51,39,42,118,47,40,116,115,118,330,54,17,115,382,41,117',
'383,15,16,84,117,334,249,65,67,72,238,53,60,387,61,46,77,78,79,38,68',
'118,70,71,331,115,391,52,56,58,57,18,49,117,393,59,330,45,84,48,84,55',
'12,228,51,39,42,227,47,40,10,11,402,76,54,17,164,405,41,84,290,15,16',
'161,159,80,82,81,83,72,-165,116,116,-164,324,46,409,65,67,38,68,144',
'70,71,134,126,84,52,56,58,57,249,49,65,67,59,290,53,60,320,61,435,118',
'118,253,415,115,115,318,317,84,127,250,419,117,117,142,18,393,139,421',
'422,423,45,424,48,282,55,12,126,51,39,42,-163,47,40,10,11,428,72,54',
'17,429,430,41,431,290,15,16,143,68,84,126,65,67,72,76,53,60,440,61,46',
'73,442,443,38,68,444,70,71,266,320,412,52,56,58,57,18,49,,,59,,45,,48',
',55,120,,51,39,42,,47,40,,,,,54,17,,,41,,,15,16,,,,,65,67,72,,53,60',
',61,46,,,,38,68,,70,71,,,,52,56,58,57,18,49,,,59,,45,,48,,55,12,,51',
'39,42,,47,40,10,11,,,54,17,,,41,,,15,16,,,,,65,67,72,,53,60,,61,46,',
',,38,68,,70,71,,,,52,56,58,57,18,49,,,59,,45,,48,,55,12,,51,39,42,,47',
'40,10,11,,,54,17,,,41,,,15,16,,,,,,,72,,,,,,46,,65,67,38,68,144,70,71',
',,,52,56,58,57,,49,65,67,59,,53,60,,61,433,,,,,,,,,,,,,,,142,18,,139',
',,,45,,48,,55,12,,51,39,42,,47,40,10,11,,72,54,17,,,41,,,15,16,143,68',
',,65,67,72,,53,60,,61,46,,,,38,68,,70,71,,,,52,56,58,57,18,49,,,59,',
'45,,48,,55,120,,51,39,42,,47,40,,,,,54,17,,,41,,,15,16,,,,,65,67,72',
',53,60,,61,46,,,,38,68,,70,71,,,,52,56,58,57,18,49,,,59,,45,,48,,55',
'120,,51,39,42,,47,40,,,,,54,17,,,41,,,15,16,,,,,65,67,72,,53,60,,61',
'46,,,,38,68,,70,71,,,,52,56,58,57,18,49,,,59,,45,,48,,55,120,,51,39',
'42,,47,40,,,,,54,17,,,41,,,15,16,,,,,65,67,72,,53,60,,61,46,,,,38,68',
',70,71,,,,52,56,58,57,18,49,,,59,,45,,48,,55,12,,51,39,42,,47,40,10',
'11,,,54,17,,,41,,,15,16,,,,,,,72,,,,,,46,,65,67,38,68,144,70,71,,,,52',
'56,58,57,,49,65,67,59,,53,60,,61,427,,,,,,,,,,,,,,,142,18,,139,,,,45',
',48,,55,12,,51,39,42,,47,40,10,11,,72,54,17,,,41,,,15,16,143,68,,,65',
'67,72,,53,60,,61,46,,,,38,68,,70,71,,,,52,56,58,57,18,49,,,59,,45,,48',
',55,120,,51,39,42,,47,40,,,,,54,17,,,41,,,15,16,,,,,65,67,72,,53,60',
',61,46,,,,38,68,,70,71,,,,52,56,58,57,18,49,,,59,,45,,48,,55,120,,51',
'39,42,,47,40,,,,,54,17,,,41,,,15,16,,,,,65,67,72,,53,60,,61,46,,,,38',
'68,,70,71,,,,52,56,58,57,18,49,,,59,,45,,48,,55,120,,51,39,42,,47,40',
',,,,54,17,,,41,,,15,16,,,,,65,67,72,,53,60,,61,46,,,,38,68,,70,71,,',
',52,56,58,57,18,49,,,59,,45,,48,,55,120,,51,39,42,,47,40,,,,,54,17,',
',41,,,15,16,,,,,65,67,72,,53,60,,61,46,,,,38,68,,70,71,,,,52,56,58,57',
'18,49,,,59,,45,,48,,55,120,,51,39,42,,47,40,,,,,54,17,,,41,,,15,16,',
',,,65,67,72,,53,60,,61,46,,,,38,68,,70,71,,,,52,56,58,57,18,49,,,59',
',45,,48,,55,120,,51,39,42,,47,40,,,,,54,17,,,41,,,15,16,,,,,65,67,72',
',53,60,,61,46,,,,38,68,,70,71,,,,52,56,58,57,18,49,,,59,,45,,48,,55',
'12,,51,39,42,,47,40,10,11,,,54,17,,,41,,,15,16,,,,,65,67,72,,53,60,',
'61,46,,,,38,68,,70,71,,,,52,56,58,57,18,49,,,59,,45,,48,,55,120,,51',
'39,42,,47,40,,,,,54,17,,,41,,,15,16,,,,,65,67,72,,53,60,,61,46,,291',
',38,68,,70,71,,,,52,56,58,57,18,49,,,59,,45,,48,,55,120,,51,39,42,,47',
'40,,,,,54,17,,,41,,,15,16,,,,,,,72,,,,,,46,,65,67,38,68,144,70,71,,',
',52,56,58,57,,49,65,67,59,,53,60,,61,328,,,,,,,,,,,,,,,142,18,,139,',
',,45,,48,,55,12,,51,39,42,,47,40,10,11,,72,54,17,,,41,,,15,16,143,68',
',,,,72,,,,,,46,,,,38,68,,70,71,,,,52,56,58,57,,49,65,67,59,,53,60,,61',
'338,85,,,,,,,,,,,,,,106,18,109,,104,105,,45,,48,,55,12,,51,39,42,,47',
'40,10,11,,,54,17,108,,41,,,15,16,,,,,,,72,,,,,,46,,,86,38,68,,70,71',
',,,52,56,58,57,,49,65,67,59,,53,60,,61,340,85,,,,,,,,,,,,,,106,18,109',
',104,105,,45,,48,,55,12,,51,39,42,,47,40,10,11,,,54,17,108,,41,,,15',
'16,,,,,65,67,72,,53,60,148,61,46,,,86,38,68,,70,71,,,,52,56,58,57,18',
'49,,,59,,45,,48,,55,12,,51,39,42,,47,40,10,11,,,54,17,,,41,,,15,16,',
',,,65,67,72,,53,60,150,61,46,,,,38,68,,70,71,,,,52,56,58,57,18,49,,',
'59,,45,,48,,55,12,,51,39,42,,47,40,10,11,,,54,17,,,41,,,15,16,,,,,,',
'72,,,,,,46,,,,38,68,,70,71,,,,52,56,58,57,,49,65,67,59,,53,60,,61,152',
'85,,,,,,,,,,,,,,106,18,109,,104,105,,45,,48,,55,12,,51,39,42,,47,40',
'10,11,,,54,17,108,,41,,,15,16,,,,,65,67,72,,53,60,,61,46,,,,38,68,,70',
'71,,,,52,56,58,57,18,49,,,59,,45,,48,,55,12,,51,39,42,,47,40,10,11,',
',54,17,,,41,,,15,16,,,,,,,72,,,,,,46,,,,38,68,,70,71,,,,52,56,58,57',
',49,65,67,59,,53,60,,61,152,85,,,,,,,,,,,,,,106,18,109,,104,105,,45',
',48,,55,12,,51,39,42,,47,40,10,11,,,54,17,108,,41,,,15,16,,,,,65,67',
'72,,53,60,,61,46,,,,38,68,,70,71,,,,52,56,58,57,18,49,,,59,,45,,48,',
'55,120,,51,39,42,,47,40,,,,,54,17,,,41,,,15,16,,,,,65,67,72,,53,60,',
'61,46,,,,38,68,,70,71,,,,52,56,58,57,18,49,,,59,,45,,48,,55,120,,51',
'39,42,,47,40,,,,,54,17,,,41,,,15,16,,,,,65,67,72,,53,60,,61,46,,,,38',
'68,,70,71,,,,52,56,58,57,18,49,,,59,,45,,48,,55,12,,51,39,42,,47,40',
'10,11,,,54,17,,,41,,,15,16,,,,,65,67,72,,53,60,,61,46,,,,38,68,,70,71',
',,,52,56,58,57,18,49,,,59,,45,,48,,55,12,,51,39,42,,47,40,10,11,,,54',
'17,,,41,,,15,16,,,,,65,67,72,,53,60,,61,46,,,,38,68,,70,71,,,,52,56',
'58,57,18,49,,,59,,45,,48,,55,12,,51,39,42,,47,40,10,11,,,54,17,,,41',
',,15,16,,,,,65,67,72,,53,60,,61,46,,,,38,68,,70,71,,,,52,56,58,57,18',
'49,,,59,,45,,48,,55,12,,51,39,42,,47,40,10,11,,,54,17,,,41,,,15,16,',
',,,65,67,72,,53,60,,61,46,,,,38,68,,70,71,,,,52,56,58,57,18,49,,,59',
',45,,48,,55,12,,51,39,42,,47,40,10,11,,,54,17,,,41,,,15,16,,,,,65,67',
'72,,53,60,,61,46,,,,38,68,,70,71,,,,52,56,58,57,18,49,,,59,,45,,48,',
'55,12,,51,39,42,,47,40,10,11,,,54,17,,,41,,,15,16,,,,,65,67,72,,53,60',
',61,46,,,,38,68,,70,71,,,,52,56,58,57,18,49,,,59,,45,,48,,55,12,,51',
'39,42,,47,40,10,11,,,54,17,,,41,,,15,16,,,,,65,67,72,,53,60,,61,46,',
',,38,68,,70,71,,,,52,56,58,57,18,49,,,59,,45,,48,,55,12,,51,39,42,,47',
'40,10,11,,,54,17,,,41,,,15,16,,,,,65,67,72,,53,60,,61,46,,,,38,68,,70',
'71,,,,52,56,58,57,18,49,,,59,,45,,48,,55,12,,51,39,42,,47,40,10,11,',
',54,17,,,41,,,15,16,,,,,65,67,72,,53,60,,61,46,,,,38,68,,70,71,,,,52',
'56,58,57,18,49,,,59,,45,,48,,55,12,,51,39,42,,47,40,10,11,,,54,17,,',
'41,,,15,16,,,,,65,67,72,,53,60,,61,46,,,,38,68,,70,71,,,,52,56,58,57',
'18,49,,,59,,45,,48,,55,12,,51,39,42,,47,40,10,11,,,54,17,,,41,,,15,16',
',,,,65,67,72,,53,60,,61,46,,,,38,68,,70,71,,,,52,56,58,57,18,49,,,59',
',180,195,186,196,55,188,198,189,39,179,,182,177,,,,,54,17,199,194,178',
',,15,176,,,,,,,72,,,,,197,181,,,,38,68,,70,71,,,,190,191,193,192,,187',
'200,,59,65,67,,85,53,60,,61,,85,,,,,,,,106,,109,,104,105,106,18,109',
',104,105,,45,,48,,55,120,,51,39,42,,47,40,108,,,,54,17,108,,41,,,15',
'16,,,,,65,67,72,,53,60,,61,46,,,,38,68,,70,71,,,,52,56,58,57,18,49,',
',59,,45,,48,,55,120,,51,39,42,,47,40,,,,,54,17,,,41,,,15,16,,,,,65,67',
'72,,53,60,,61,46,,,,38,68,,70,71,,,,52,56,58,57,18,49,,,59,,45,,48,',
'55,120,,51,39,42,,47,40,,,,,54,17,,,41,,,15,16,,,,,65,67,72,,53,60,',
'61,46,,,,38,68,,70,71,,,,52,56,58,57,18,49,,,59,,45,,48,,55,120,,51',
'39,42,,47,40,,,,,54,17,,,41,,,15,16,,,,,65,67,72,,53,60,,61,46,,,,38',
'68,,70,71,,,,52,56,58,57,18,49,,,59,,45,,48,,55,120,,51,39,42,,47,40',
',,,,54,17,,,41,,,15,16,,,,,65,67,72,,53,60,,61,46,,,,38,68,,70,71,,',
',52,56,58,57,18,49,,,59,,45,,48,,55,120,,51,39,42,,47,40,,,,,54,17,',
',41,,,15,16,,,,,65,67,72,,53,60,,61,46,,,,38,68,,70,71,,,,52,56,58,57',
'18,49,,,59,,45,,48,,55,120,,51,39,42,,47,40,,,,,54,17,,,41,,,15,16,',
',,,65,67,72,,53,60,,61,46,,,,38,68,,70,71,,,,52,56,58,57,18,49,,,59',
',45,,48,,55,120,,51,39,42,,47,40,,,,,54,17,,,41,,,15,16,,,,,65,67,72',
',53,60,,61,46,,,,38,68,,70,71,,,,52,56,58,57,18,49,,,59,,45,,48,,55',
'120,,51,39,42,,47,40,,,,,54,17,,,41,,,15,16,,,,,65,67,72,,53,60,,61',
'46,,,,38,68,,70,71,,,,52,56,58,57,18,49,,,59,,45,,48,,55,120,,51,39',
'42,,47,40,,,,,54,17,,,41,,,15,16,,,,,65,67,72,,53,60,,61,46,,,,38,68',
',70,71,,,,52,56,58,57,18,49,,,59,,45,,48,,55,120,,51,39,42,,47,40,,',
',,54,17,,,41,,,15,16,,,,,65,67,72,,53,60,,61,46,,,,38,68,,70,71,,,,52',
'56,58,57,18,49,,,59,,45,,48,,55,120,,51,39,42,,47,40,,,,,54,17,,,41',
',,15,16,,,,,65,67,72,,53,60,,61,46,,,,38,68,,70,71,,,,52,56,58,57,18',
'49,,,59,,45,,48,,55,120,,51,39,42,,47,40,,,,,54,17,,,41,,,15,16,,,,',
'65,67,72,,53,60,,61,46,,,,38,68,,70,71,,,,52,56,58,57,18,49,,,59,,45',
',48,,55,120,,51,39,42,,47,40,,,,,54,17,,,41,,,15,16,,,,,65,67,72,,53',
'60,,61,46,,,,38,68,,70,71,,,,52,56,58,57,18,49,,,59,,45,,48,,55,120',
',51,39,42,,47,40,,,,,54,17,,,41,,,15,16,,,,,65,67,72,,53,60,,61,46,',
',,38,68,,70,71,,,,52,56,58,57,18,49,,,59,,45,,48,,55,120,,51,39,42,',
'47,40,,,,,54,17,,,41,,,15,16,,,,,65,67,72,,53,60,,61,46,,,,38,68,,70',
'71,,,,52,56,58,57,18,49,,,59,,45,,48,,55,120,,51,39,42,,47,40,,,,,54',
'17,,,41,,,15,16,,,,,65,67,72,,53,60,,61,46,,,,38,68,,70,71,,,,52,56',
'58,57,18,49,,,59,,45,,48,,55,120,,51,39,42,,47,40,,,,,54,17,,,41,,,15',
'16,,,,,65,67,72,,53,60,,61,46,,,,38,68,,70,71,,,,52,56,58,57,18,49,',
',59,,45,,48,,55,120,,51,39,42,,47,40,,,,,54,17,,,41,,,15,16,,,,,65,67',
'72,,53,60,,61,46,,,,38,68,,70,71,,,,52,56,58,57,18,49,,,59,,45,,48,',
'55,120,,51,39,42,,47,40,,,,,54,17,,,41,,,15,16,,,,,,,72,,,,,,46,,,224',
'38,68,,70,71,,,,52,56,58,57,,49,65,67,59,,53,60,,61,,,,,,,,,,,,,,,,',
'18,226,,,,,45,,48,,55,12,,51,39,42,,47,40,10,11,,,54,17,,,41,,,15,16',
',,,,65,67,72,,53,60,,61,46,,,,38,68,,70,71,,,,52,56,58,57,18,49,,,59',
',45,,48,,55,120,,51,39,42,,47,40,,,,,54,17,,,41,,,15,16,,,,,65,67,72',
',53,60,,61,46,,,,38,68,,70,71,,,,52,56,58,57,18,49,,,59,,45,,48,,55',
'12,,51,39,42,,47,40,10,11,,,54,17,,,41,,,15,16,,,,,65,67,72,,53,60,',
'61,46,,,,38,68,,70,71,,,,52,56,58,57,18,49,,,59,,45,,48,,55,120,,51',
'39,42,,47,40,,,,,54,17,,,41,,,15,16,,,,,65,67,72,,53,60,,61,46,,,,38',
'68,,70,71,,,,52,56,58,57,18,49,,,59,,45,,48,,55,120,,51,39,42,,47,40',
',,,,54,17,,,41,,,15,16,,,,,65,67,72,,53,60,,61,46,,,,38,68,,70,71,,',
',52,56,58,57,18,49,,,59,,45,,48,,55,12,,51,39,42,,47,40,10,11,,,54,17',
',,41,,,15,16,,,,,,,72,,,,,,46,,,,38,68,,70,71,,,,52,56,58,57,,49,65',
'67,59,,53,60,,61,395,,,,,,,,,,,,,,,,18,,,,,,45,,48,,55,120,,51,39,42',
',47,40,,,,,54,17,,,41,,,15,16,,,,,65,67,72,,53,60,,61,46,,,,38,68,,70',
'71,,,,52,56,58,57,18,49,,,59,,45,,48,,55,120,,51,39,42,,47,40,,,,,54',
'17,,,41,,,15,16,,,,,65,67,72,,53,60,,61,46,,,,38,68,,70,71,,,,52,56',
'58,57,18,49,,,59,,45,,48,,55,12,,51,39,42,,47,40,10,11,,,54,17,,,41',
',,15,16,,,,,65,67,72,,53,60,,61,46,,,,38,68,,70,71,,,,52,56,58,57,18',
'49,,,59,,45,,48,,55,120,,51,39,42,,47,40,,,,,54,17,,,41,,,15,16,,,,',
'65,67,72,,53,60,,61,46,,,,38,68,,70,71,,,,52,56,58,57,18,49,,,59,,45',
',48,,55,120,,51,39,42,,47,40,,,,,54,17,,,41,,,15,16,,,,,65,67,72,,53',
'60,,61,46,,,,38,68,,70,71,,,,52,56,58,57,18,49,,,59,,45,,48,,55,12,',
'51,39,42,,47,40,10,11,,,54,17,,,41,,,15,16,,,,,65,67,72,,53,60,,61,46',
',,,38,68,,70,71,,,,52,56,58,57,18,49,,,59,,45,,48,,55,120,,51,39,42',
',47,40,,,,,54,17,,,41,,,15,16,,,,,65,67,72,,53,60,,61,46,,,,38,68,,70',
'71,,,,52,56,58,57,18,49,,,59,,45,,48,,55,120,,51,39,42,,47,40,,,,,54',
'17,,,41,,,15,16,,,,,65,67,72,,53,60,,61,46,,,,38,68,,70,71,,,,52,56',
'58,57,18,49,,,59,,45,,48,,55,120,,51,39,42,,47,40,,,,,54,17,,,41,,,15',
'16,,,,,65,67,72,,53,60,,61,46,,,,38,68,,70,71,,,,52,56,58,57,18,49,',
',59,,45,,48,,55,120,,51,39,42,,47,40,,,,,54,17,,,41,,,15,16,,,,,,,72',
',,,,,46,,,,38,68,,70,71,,,,52,56,58,57,,49,65,67,59,,53,60,,61,308,195',
'307,196,,305,198,309,,302,,304,306,,,,18,255,,199,194,310,45,,48,303',
'55,12,,51,39,42,,47,40,10,11,197,311,54,17,,,41,,,15,16,,,314,315,313',
'312,72,316,200,,,,46,,,,38,68,,70,71,,,,52,56,58,57,,49,65,67,59,,53',
'60,,61,356,,,,,,,,,,,,,,,,18,,,,,,45,,48,,55,12,,51,39,42,,47,40,10',
'11,,,54,17,,,41,,,15,16,,,,,65,67,72,,53,60,,61,46,,,,38,68,,70,71,',
',,52,56,58,57,18,49,,,59,,45,,48,,55,12,,51,39,42,,47,40,10,11,,,54',
'17,,,41,,,15,16,,,,,65,67,72,,53,60,,61,46,,,,38,68,,70,71,,,,52,56',
'58,57,18,49,,,59,,45,,48,,55,12,,51,39,42,,47,40,10,11,,,54,17,,,41',
',,15,16,,,,,65,67,72,,53,60,,61,46,,,,38,68,,70,71,,,,52,56,58,57,18',
'49,,,59,,45,,48,,55,120,,51,39,42,,47,40,,,,,54,17,,,41,,,15,16,,,,',
'65,67,72,,53,60,,61,46,,,,38,68,,70,71,,,,52,56,58,57,18,49,,,59,,45',
',48,,55,120,,51,39,42,,47,40,,,,,54,17,,,41,,,15,16,,,,,65,67,72,,53',
'60,,163,46,,,,38,68,,70,71,,,,52,56,58,57,18,49,,,59,,45,,48,,55,120',
',51,39,42,,47,40,,,,,54,17,,,41,,,15,16,,,,,,,72,,,,,,46,,,,38,68,,70',
'71,85,,,52,56,58,57,,49,,,59,,96,106,,109,85,104,105,,97,,,,,,,,,,106',
',109,,104,105,,,,108,,,,,,,,89,90,92,91,94,95,,87,88,108,,,,,86,,,89',
'90,92,91,,,,87,88,85,,258,,,86,,,,,,93,101,96,106,,109,,104,105,,97',
'99,98,100,,,,93,,,,,,,,,,,,108,,,,103,102,,,89,90,92,91,94,95,,87,88',
'85,,257,,,86,,,,,,,101,96,106,,109,,104,105,,97,99,98,100,,,,93,,,,',
',,,,,,,108,,,,103,102,,,89,90,92,91,94,95,,87,88,85,,256,,,86,,,,,,',
'101,96,106,,109,85,104,105,,97,99,98,100,,,,93,,,106,,109,,104,105,',
',,108,,,,103,102,,,89,90,92,91,94,95,,87,88,108,,,,,86,,,89,90,92,91',
'94,95,,87,88,85,,,,,86,,,,,,93,,96,106,,109,85,104,105,,97,,,,,,,93',
',,106,,109,,104,105,,,,108,,,,,,,,89,90,92,91,94,95,,87,88,108,,,,,86',
',,89,90,92,91,,,,87,88,85,,346,,,86,,,,,,93,101,96,106,,109,85,104,105',
',97,99,98,100,,,,93,,96,106,,109,,104,105,,97,,108,,,,103,102,,,89,90',
'92,91,94,95,,87,88,108,,,,,86,,,89,90,92,91,94,95,,87,88,85,,,,,86,',
',,,,93,101,96,106,,109,85,104,105,,97,99,98,100,,,,93,,,106,,109,,104',
'105,,,,108,,,,103,102,,85,89,90,92,91,94,95,,87,88,108,,101,96,106,86',
'109,,104,105,,97,99,98,100,87,88,,,,,,86,,,,,,93,,108,,,,103,102,,85',
'89,90,92,91,94,95,,87,88,,,101,96,106,86,109,85,104,105,,97,99,98,100',
',284,285,,,,106,,109,,104,105,,93,,108,,,,103,102,,85,89,90,92,91,94',
'95,,87,88,108,,101,96,106,86,109,85,104,105,,97,99,98,100,87,88,,,,',
'106,86,109,,104,105,,93,,108,,,,103,102,,85,89,90,92,91,94,95,,87,88',
'108,,101,96,106,86,109,,104,105,,97,99,98,100,87,88,,,,,,86,,,,,,93',
',108,,,,103,102,,85,89,90,92,91,94,95,,87,88,,,101,96,106,86,109,,104',
'105,,97,99,98,100,,,,,,,,,,,,,,93,,108,,,,103,102,,,89,90,92,91,94,95',
'85,87,88,,,,,,86,,,,101,96,106,321,109,,104,105,85,97,99,98,100,,,,',
',,93,,96,106,,109,,104,105,108,97,,,103,102,,,89,90,92,91,94,95,,87',
'88,,,,108,,86,,,,,,89,90,92,91,94,95,85,87,88,,,,,,86,,,93,101,96,106',
'288,109,,104,105,85,97,99,98,100,,,,,,,93,,,106,,109,,104,105,108,,',
',103,102,,85,89,90,92,91,94,95,,87,88,,,,108,106,86,109,,104,105,,,',
'92,91,,,85,87,88,,,,,,86,,,93,,108,106,,109,,104,105,85,89,90,92,91',
'94,95,,87,88,,93,101,96,106,86,109,,104,105,108,97,99,98,100,,,,,,92',
'91,,,,87,88,,93,,108,,86,,103,102,,,89,90,92,91,94,95,85,87,88,,,296',
',,86,,,93,101,96,106,,109,,104,105,,97,99,98,100,,,,,,,93,,,,,,,,,108',
',,,103,102,,85,89,90,92,91,94,95,,87,88,,,101,96,106,86,109,,104,105',
',97,99,98,100,,,,,,,,,,,,,,93,,108,,,,103,102,,,89,90,92,91,94,95,85',
'87,88,,,,,,86,,,,101,96,106,425,109,,104,105,,97,99,98,100,,,,,,,93',
',,,,,,,,108,,,,103,102,,85,89,90,92,91,94,95,,87,88,,,101,96,106,86',
'109,,104,105,,97,99,98,100,,,,,,,,,,,,,,93,,108,,,,103,102,,85,89,90',
'92,91,94,95,,87,88,,,101,96,106,86,109,,104,105,,97,99,98,100,,,,,,',
',,,,,,,93,,108,,,,,102,,85,89,90,92,91,94,95,,87,88,,,101,96,106,86',
'109,,104,105,,97,99,98,100,,,,,,,,,,,,,,93,,108,,,,,,,85,89,90,92,91',
'94,95,,87,88,,,101,96,106,86,109,,104,105,,97,99,98,100,,,,,,,,,,,,',
',93,,108,,,,103,102,,,89,90,92,91,94,95,,87,88,,308,195,307,196,86,305',
'198,309,,302,,304,306,,,,,,,199,194,310,,,,303,,93,,,,,,,,,,197,311',
',,,,,,,,,,,314,315,313,312,,316,200,308,195,307,196,,305,198,309,,302',
',304,306,,,,,,,199,194,310,,,,303,,,,,,,,,,,,197,311,,,,,,,,,,,,314',
'315,313,312,,316,200,308,195,307,196,,305,198,309,,302,,304,306,,,,',
',,199,194,310,,,,303,,,,,,,,,,,,197,311,,,,,,,,,,,,314,315,313,312,',
'316,200,308,195,307,196,,305,198,309,,302,,304,306,,,,,,,199,194,310',
',,,303,,,,,,,,,,,,197,311,,,,,,,,,,,,314,315,313,312,,316,200,308,195',
'307,196,,305,198,309,,302,,304,306,,,,,,,199,194,310,,,,303,,,,,,,,',
',,,197,311,,,,,,,,,,,,314,315,313,312,,316,200' ]
        racc_action_table = arr = ::Array.new(7251, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'0,0,254,238,0,0,265,0,330,341,179,177,238,154,188,120,254,202,341,251',
'267,330,202,264,0,238,386,178,49,330,0,386,0,238,0,0,191,0,0,0,251,0',
'0,0,0,188,120,0,0,188,120,0,179,177,0,0,264,188,120,49,430,430,0,49',
'430,430,268,430,0,178,149,49,0,0,324,0,0,0,191,147,0,0,0,0,430,0,179',
'192,0,193,430,387,430,387,430,430,188,430,430,430,145,430,430,12,281',
'324,12,430,430,324,439,430,324,439,430,430,151,324,286,151,4,4,430,185',
'4,4,287,4,430,192,137,193,430,430,12,430,430,338,12,338,430,430,430',
'430,4,430,12,289,430,135,4,133,4,132,4,4,126,4,4,4,4,4,4,4,4,185,262',
'4,4,126,125,4,159,159,4,4,159,126,361,361,182,182,4,123,182,182,297',
'182,4,190,299,126,4,4,187,4,4,156,156,301,4,4,4,4,182,4,303,319,4,260',
'182,259,182,322,182,182,165,182,182,182,190,182,182,186,190,187,326',
'182,182,187,327,182,190,329,182,182,170,187,252,250,422,422,182,113',
'422,422,337,422,182,7,7,7,182,182,186,182,182,249,186,339,182,182,182',
'182,422,182,186,340,182,243,422,111,422,110,422,422,107,422,422,422',
'106,422,422,422,422,347,75,422,422,73,360,422,171,362,422,422,69,68',
'7,7,7,7,422,54,52,48,53,236,422,370,189,189,422,422,189,422,422,50,372',
'172,422,422,422,422,161,422,421,421,422,376,421,421,233,421,421,52,48',
'161,381,52,48,232,230,173,44,161,390,52,48,189,421,391,189,393,394,397',
'421,400,421,161,421,421,43,421,421,421,42,421,421,421,421,404,189,421',
'421,407,408,421,414,175,421,421,189,189,8,226,181,181,421,5,181,181',
'426,181,421,1,432,434,421,421,436,421,421,225,441,373,421,421,421,421',
'181,421,,,421,,181,,181,,181,181,,181,181,181,,181,181,,,,,181,181,',
',181,,,181,181,,,,,10,10,181,,10,10,,10,181,,,,181,181,,181,181,,,,181',
'181,181,181,10,181,,,181,,10,,10,,10,10,,10,10,10,,10,10,10,10,,,10',
'10,,,10,,,10,10,,,,,11,11,10,,11,11,,11,10,,,,10,10,,10,10,,,,10,10',
'10,10,11,10,,,10,,11,,11,,11,11,,11,11,11,,11,11,11,11,,,11,11,,,11',
',,11,11,,,,,,,11,,,,,,11,,263,263,11,11,263,11,11,,,,11,11,11,11,,11',
'419,419,11,,419,419,,419,419,,,,,,,,,,,,,,,263,419,,263,,,,419,,419',
',419,419,,419,419,419,,419,419,419,419,,263,419,419,,,419,,,419,419',
'263,263,,,15,15,419,,15,15,,15,419,,,,419,419,,419,419,,,,419,419,419',
'419,15,419,,,419,,15,,15,,15,15,,15,15,15,,15,15,,,,,15,15,,,15,,,15',
'15,,,,,16,16,15,,16,16,,16,15,,,,15,15,,15,15,,,,15,15,15,15,16,15,',
',15,,16,,16,,16,16,,16,16,16,,16,16,,,,,16,16,,,16,,,16,16,,,,,17,17',
'16,,17,17,,17,16,,,,16,16,,16,16,,,,16,16,16,16,17,16,,,16,,17,,17,',
'17,17,,17,17,17,,17,17,,,,,17,17,,,17,,,17,17,,,,,18,18,17,,18,18,,18',
'17,,,,17,17,,17,17,,,,17,17,17,17,18,17,,,17,,18,,18,,18,18,,18,18,18',
',18,18,18,18,,,18,18,,,18,,,18,18,,,,,,,18,,,,,,18,,349,349,18,18,349',
'18,18,,,,18,18,18,18,,18,402,402,18,,402,402,,402,402,,,,,,,,,,,,,,',
'349,402,,349,,,,402,,402,,402,402,,402,402,402,,402,402,402,402,,349',
'402,402,,,402,,,402,402,349,349,,,180,180,402,,180,180,,180,402,,,,402',
'402,,402,402,,,,402,402,402,402,180,402,,,402,,180,,180,,180,180,,180',
'180,180,,180,180,,,,,180,180,,,180,,,180,180,,,,,389,389,180,,389,389',
',389,180,,,,180,180,,180,180,,,,180,180,180,180,389,180,,,180,,389,',
'389,,389,389,,389,389,389,,389,389,,,,,389,389,,,389,,,389,389,,,,,45',
'45,389,,45,45,,45,389,,,,389,389,,389,389,,,,389,389,389,389,45,389',
',,389,,45,,45,,45,45,,45,45,45,,45,45,,,,,45,45,,,45,,,45,45,,,,,46',
'46,45,,46,46,,46,45,,,,45,45,,45,45,,,,45,45,45,45,46,45,,,45,,46,,46',
',46,46,,46,46,46,,46,46,,,,,46,46,,,46,,,46,46,,,,,47,47,46,,47,47,',
'47,46,,,,46,46,,46,46,,,,46,46,46,46,47,46,,,46,,47,,47,,47,47,,47,47',
'47,,47,47,,,,,47,47,,,47,,,47,47,,,,,224,224,47,,224,224,,224,47,,,',
'47,47,,47,47,,,,47,47,47,47,224,47,,,47,,224,,224,,224,224,,224,224',
'224,,224,224,,,,,224,224,,,224,,,224,224,,,,,377,377,224,,377,377,,377',
'224,,,,224,224,,224,224,,,,224,224,224,224,377,224,,,224,,377,,377,',
'377,377,,377,377,377,,377,377,377,377,,,377,377,,,377,,,377,377,,,,',
'371,371,377,,371,371,,371,377,,,,377,377,,377,377,,,,377,377,377,377',
'371,377,,,377,,371,,371,,371,371,,371,371,371,,371,371,,,,,371,371,',
',371,,,371,371,,,,,176,176,371,,176,176,,176,371,,176,,371,371,,371',
'371,,,,371,371,371,371,176,371,,,371,,176,,176,,176,176,,176,176,176',
',176,176,,,,,176,176,,,176,,,176,176,,,,,,,176,,,,,,176,,51,51,176,176',
'51,176,176,,,,176,176,176,176,,176,241,241,176,,241,241,,241,241,,,',
',,,,,,,,,,,51,241,,51,,,,241,,241,,241,241,,241,241,241,,241,241,241',
'241,,51,241,241,,,241,,,241,241,51,51,,,,,241,,,,,,241,,,,241,241,,241',
'241,,,,241,241,241,241,,241,256,256,241,,256,256,,256,256,205,,,,,,',
',,,,,,,205,256,205,,205,205,,256,,256,,256,256,,256,256,256,,256,256',
'256,256,,,256,256,205,,256,,,256,256,,,,,,,256,,,,,,256,,,205,256,256',
',256,256,,,,256,256,256,256,,256,257,257,256,,257,257,,257,257,204,',
',,,,,,,,,,,,204,257,204,,204,204,,257,,257,,257,257,,257,257,257,,257',
'257,257,257,,,257,257,204,,257,,,257,257,,,,,59,59,257,,59,59,59,59',
'257,,,204,257,257,,257,257,,,,257,257,257,257,59,257,,,257,,59,,59,',
'59,59,,59,59,59,,59,59,59,59,,,59,59,,,59,,,59,59,,,,,60,60,59,,60,60',
'60,60,59,,,,59,59,,59,59,,,,59,59,59,59,60,59,,,59,,60,,60,,60,60,,60',
'60,60,,60,60,60,60,,,60,60,,,60,,,60,60,,,,,,,60,,,,,,60,,,,60,60,,60',
'60,,,,60,60,60,60,,60,61,61,60,,61,61,,61,61,122,,,,,,,,,,,,,,122,61',
'122,,122,122,,61,,61,,61,61,,61,61,61,,61,61,61,61,,,61,61,122,,61,',
',61,61,,,,,66,66,61,,66,66,,66,61,,,,61,61,,61,61,,,,61,61,61,61,66',
'61,,,61,,66,,66,,66,66,,66,66,66,,66,66,66,66,,,66,66,,,66,,,66,66,',
',,,,,66,,,,,,66,,,,66,66,,66,66,,,,66,66,66,66,,66,163,163,66,,163,163',
',163,163,121,,,,,,,,,,,,,,121,163,121,,121,121,,163,,163,,163,163,,163',
'163,163,,163,163,163,163,,,163,163,121,,163,,,163,163,,,,,258,258,163',
',258,258,,258,163,,,,163,163,,163,163,,,,163,163,163,163,258,163,,,163',
',258,,258,,258,258,,258,258,258,,258,258,,,,,258,258,,,258,,,258,258',
',,,,134,134,258,,134,134,,134,258,,,,258,258,,258,258,,,,258,258,258',
'258,134,258,,,258,,134,,134,,134,134,,134,134,134,,134,134,,,,,134,134',
',,134,,,134,134,,,,,352,352,134,,352,352,,352,134,,,,134,134,,134,134',
',,,134,134,134,134,352,134,,,134,,352,,352,,352,352,,352,352,352,,352',
'352,352,352,,,352,352,,,352,,,352,352,,,,,74,74,352,,74,74,,74,352,',
',,352,352,,352,352,,,,352,352,352,352,74,352,,,352,,74,,74,,74,74,,74',
'74,74,,74,74,74,74,,,74,74,,,74,,,74,74,,,,,160,160,74,,160,160,,160',
'74,,,,74,74,,74,74,,,,74,74,74,74,160,74,,,74,,160,,160,,160,160,,160',
'160,160,,160,160,160,160,,,160,160,,,160,,,160,160,,,,,76,76,160,,76',
'76,,76,160,,,,160,160,,160,160,,,,160,160,160,160,76,160,,,160,,76,',
'76,,76,76,,76,76,76,,76,76,76,76,,,76,76,,,76,,,76,76,,,,,77,77,76,',
'77,77,,77,76,,,,76,76,,76,76,,,,76,76,76,76,77,76,,,76,,77,,77,,77,77',
',77,77,77,,77,77,77,77,,,77,77,,,77,,,77,77,,,,,78,78,77,,78,78,,78',
'77,,,,77,77,,77,77,,,,77,77,77,77,78,77,,,77,,78,,78,,78,78,,78,78,78',
',78,78,78,78,,,78,78,,,78,,,78,78,,,,,79,79,78,,79,79,,79,78,,,,78,78',
',78,78,,,,78,78,78,78,79,78,,,78,,79,,79,,79,79,,79,79,79,,79,79,79',
'79,,,79,79,,,79,,,79,79,,,,,80,80,79,,80,80,,80,79,,,,79,79,,79,79,',
',,79,79,79,79,80,79,,,79,,80,,80,,80,80,,80,80,80,,80,80,80,80,,,80',
'80,,,80,,,80,80,,,,,81,81,80,,81,81,,81,80,,,,80,80,,80,80,,,,80,80',
'80,80,81,80,,,80,,81,,81,,81,81,,81,81,81,,81,81,81,81,,,81,81,,,81',
',,81,81,,,,,82,82,81,,82,82,,82,81,,,,81,81,,81,81,,,,81,81,81,81,82',
'81,,,81,,82,,82,,82,82,,82,82,82,,82,82,82,82,,,82,82,,,82,,,82,82,',
',,,83,83,82,,83,83,,83,82,,,,82,82,,82,82,,,,82,82,82,82,83,82,,,82',
',83,,83,,83,83,,83,83,83,,83,83,83,83,,,83,83,,,83,,,83,83,,,,,84,84',
'83,,84,84,,84,83,,,,83,83,,83,83,,,,83,83,83,83,84,83,,,83,,84,84,84',
'84,84,84,84,84,84,84,,84,84,,,,,84,84,84,84,84,,,84,84,,,,,,,84,,,,',
'84,84,,,,84,84,,84,84,,,,84,84,84,84,,84,84,,84,85,85,,119,85,85,,85',
',203,,,,,,,,119,,119,,119,119,203,85,203,,203,203,,85,,85,,85,85,,85',
'85,85,,85,85,119,,,,85,85,203,,85,,,85,85,,,,,86,86,85,,86,86,,86,85',
',,,85,85,,85,85,,,,85,85,85,85,86,85,,,85,,86,,86,,86,86,,86,86,86,',
'86,86,,,,,86,86,,,86,,,86,86,,,,,87,87,86,,87,87,,87,86,,,,86,86,,86',
'86,,,,86,86,86,86,87,86,,,86,,87,,87,,87,87,,87,87,87,,87,87,,,,,87',
'87,,,87,,,87,87,,,,,88,88,87,,88,88,,88,87,,,,87,87,,87,87,,,,87,87',
'87,87,88,87,,,87,,88,,88,,88,88,,88,88,88,,88,88,,,,,88,88,,,88,,,88',
'88,,,,,89,89,88,,89,89,,89,88,,,,88,88,,88,88,,,,88,88,88,88,89,88,',
',88,,89,,89,,89,89,,89,89,89,,89,89,,,,,89,89,,,89,,,89,89,,,,,90,90',
'89,,90,90,,90,89,,,,89,89,,89,89,,,,89,89,89,89,90,89,,,89,,90,,90,',
'90,90,,90,90,90,,90,90,,,,,90,90,,,90,,,90,90,,,,,91,91,90,,91,91,,91',
'90,,,,90,90,,90,90,,,,90,90,90,90,91,90,,,90,,91,,91,,91,91,,91,91,91',
',91,91,,,,,91,91,,,91,,,91,91,,,,,92,92,91,,92,92,,92,91,,,,91,91,,91',
'91,,,,91,91,91,91,92,91,,,91,,92,,92,,92,92,,92,92,92,,92,92,,,,,92',
'92,,,92,,,92,92,,,,,93,93,92,,93,93,,93,92,,,,92,92,,92,92,,,,92,92',
'92,92,93,92,,,92,,93,,93,,93,93,,93,93,93,,93,93,,,,,93,93,,,93,,,93',
'93,,,,,94,94,93,,94,94,,94,93,,,,93,93,,93,93,,,,93,93,93,93,94,93,',
',93,,94,,94,,94,94,,94,94,94,,94,94,,,,,94,94,,,94,,,94,94,,,,,95,95',
'94,,95,95,,95,94,,,,94,94,,94,94,,,,94,94,94,94,95,94,,,94,,95,,95,',
'95,95,,95,95,95,,95,95,,,,,95,95,,,95,,,95,95,,,,,96,96,95,,96,96,,96',
'95,,,,95,95,,95,95,,,,95,95,95,95,96,95,,,95,,96,,96,,96,96,,96,96,96',
',96,96,,,,,96,96,,,96,,,96,96,,,,,97,97,96,,97,97,,97,96,,,,96,96,,96',
'96,,,,96,96,96,96,97,96,,,96,,97,,97,,97,97,,97,97,97,,97,97,,,,,97',
'97,,,97,,,97,97,,,,,98,98,97,,98,98,,98,97,,,,97,97,,97,97,,,,97,97',
'97,97,98,97,,,97,,98,,98,,98,98,,98,98,98,,98,98,,,,,98,98,,,98,,,98',
'98,,,,,99,99,98,,99,99,,99,98,,,,98,98,,98,98,,,,98,98,98,98,99,98,',
',98,,99,,99,,99,99,,99,99,99,,99,99,,,,,99,99,,,99,,,99,99,,,,,100,100',
'99,,100,100,,100,99,,,,99,99,,99,99,,,,99,99,99,99,100,99,,,99,,100',
',100,,100,100,,100,100,100,,100,100,,,,,100,100,,,100,,,100,100,,,,',
'101,101,100,,101,101,,101,100,,,,100,100,,100,100,,,,100,100,100,100',
'101,100,,,100,,101,,101,,101,101,,101,101,101,,101,101,,,,,101,101,',
',101,,,101,101,,,,,102,102,101,,102,102,,102,101,,,,101,101,,101,101',
',,,101,101,101,101,102,101,,,101,,102,,102,,102,102,,102,102,102,,102',
'102,,,,,102,102,,,102,,,102,102,,,,,103,103,102,,103,103,,103,102,,',
',102,102,,102,102,,,,102,102,102,102,103,102,,,102,,103,,103,,103,103',
',103,103,103,,103,103,,,,,103,103,,,103,,,103,103,,,,,104,104,103,,104',
'104,,104,103,,,,103,103,,103,103,,,,103,103,103,103,104,103,,,103,,104',
',104,,104,104,,104,104,104,,104,104,,,,,104,104,,,104,,,104,104,,,,',
',,104,,,,,,104,,,104,104,104,,104,104,,,,104,104,104,104,,104,105,105',
'104,,105,105,,105,,,,,,,,,,,,,,,,,105,105,,,,,105,,105,,105,105,,105',
'105,105,,105,105,105,105,,,105,105,,,105,,,105,105,,,,,346,346,105,',
'346,346,,346,105,,,,105,105,,105,105,,,,105,105,105,105,346,105,,,105',
',346,,346,,346,346,,346,346,346,,346,346,,,,,346,346,,,346,,,346,346',
',,,,345,345,346,,345,345,,345,346,,,,346,346,,346,346,,,,346,346,346',
'346,345,346,,,346,,345,,345,,345,345,,345,345,345,,345,345,345,345,',
',345,345,,,345,,,345,345,,,,,108,108,345,,108,108,,108,345,,,,345,345',
',345,345,,,,345,345,345,345,108,345,,,345,,108,,108,,108,108,,108,108',
'108,,108,108,,,,,108,108,,,108,,,108,108,,,,,109,109,108,,109,109,,109',
'108,,,,108,108,,108,108,,,,108,108,108,108,109,108,,,108,,109,,109,',
'109,109,,109,109,109,,109,109,,,,,109,109,,,109,,,109,109,,,,,344,344',
'109,,344,344,,344,109,,,,109,109,,109,109,,,,109,109,109,109,344,109',
',,109,,344,,344,,344,344,,344,344,344,,344,344,344,344,,,344,344,,,344',
',,344,344,,,,,,,344,,,,,,344,,,,344,344,,344,344,,,,344,344,344,344',
',344,342,342,344,,342,342,,342,342,,,,,,,,,,,,,,,,342,,,,,,342,,342',
',342,342,,342,342,342,,342,342,,,,,342,342,,,342,,,342,342,,,,,112,112',
'342,,112,112,,112,342,,,,342,342,,342,342,,,,342,342,342,342,112,342',
',,342,,112,,112,,112,112,,112,112,112,,112,112,,,,,112,112,,,112,,,112',
'112,,,,,335,335,112,,335,335,,335,112,,,,112,112,,112,112,,,,112,112',
'112,112,335,112,,,112,,335,,335,,335,335,,335,335,335,,335,335,335,335',
',,335,335,,,335,,,335,335,,,,,334,334,335,,334,334,,334,335,,,,335,335',
',335,335,,,,335,335,335,335,334,335,,,335,,334,,334,,334,334,,334,334',
'334,,334,334,,,,,334,334,,,334,,,334,334,,,,,331,331,334,,331,331,,331',
'334,,,,334,334,,334,334,,,,334,334,334,334,331,334,,,334,,331,,331,',
'331,331,,331,331,331,,331,331,,,,,331,331,,,331,,,331,331,,,,,266,266',
'331,,266,266,,266,331,,,,331,331,,331,331,,,,331,331,331,331,266,331',
',,331,,266,,266,,266,266,,266,266,266,,266,266,266,266,,,266,266,,,266',
',,266,266,,,,,320,320,266,,320,320,,320,266,,,,266,266,,266,266,,,,266',
'266,266,266,320,266,,,266,,320,,320,,320,320,,320,320,320,,320,320,',
',,,320,320,,,320,,,320,320,,,,,296,296,320,,296,296,,296,320,,,,320',
'320,,320,320,,,,320,320,320,320,296,320,,,320,,296,,296,,296,296,,296',
'296,296,,296,296,,,,,296,296,,,296,,,296,296,,,,,295,295,296,,295,295',
',295,296,,,,296,296,,296,296,,,,296,296,296,296,295,296,,,296,,295,',
'295,,295,295,,295,295,295,,295,295,,,,,295,295,,,295,,,295,295,,,,,293',
'293,295,,293,293,,293,295,,,,295,295,,295,295,,,,295,295,295,295,293',
'295,,,295,,293,,293,,293,293,,293,293,293,,293,293,,,,,293,293,,,293',
',,293,293,,,,,,,293,,,,,,293,,,,293,293,,293,293,,,,293,293,293,293',
',293,127,127,293,,127,127,,127,425,425,425,425,,425,425,425,,425,,425',
'425,,,,127,127,,425,425,425,127,,127,425,127,127,,127,127,127,,127,127',
'127,127,425,425,127,127,,,127,,,127,127,,,425,425,425,425,127,425,425',
',,,127,,,,127,127,,127,127,,,,127,127,127,127,,127,270,270,127,,270',
'270,,270,270,,,,,,,,,,,,,,,,270,,,,,,270,,270,,270,270,,270,270,270',
',270,270,270,270,,,270,270,,,270,,,270,270,,,,,271,271,270,,271,271',
',271,270,,,,270,270,,270,270,,,,270,270,270,270,271,270,,,270,,271,',
'271,,271,271,,271,271,271,,271,271,271,271,,,271,271,,,271,,,271,271',
',,,,276,276,271,,276,276,,276,271,,,,271,271,,271,271,,,,271,271,271',
'271,276,271,,,271,,276,,276,,276,276,,276,276,276,,276,276,276,276,',
',276,276,,,276,,,276,276,,,,,292,292,276,,292,292,,292,276,,,,276,276',
',276,276,,,,276,276,276,276,292,276,,,276,,292,,292,,292,292,,292,292',
'292,,292,292,,,,,292,292,,,292,,,292,292,,,,,291,291,292,,291,291,,291',
'292,,,,292,292,,292,292,,,,292,292,292,292,291,292,,,292,,291,,291,',
'291,291,,291,291,291,,291,291,,,,,291,291,,,291,,,291,291,,,,,71,71',
'291,,71,71,,71,291,,,,291,291,,291,291,,,,291,291,291,291,71,291,,,291',
',71,,71,,71,71,,71,71,71,,71,71,,,,,71,71,,,71,,,71,71,,,,,,,71,,,,',
',71,,,,71,71,,71,71,215,,,71,71,71,71,,71,,,71,,215,215,,215,212,215',
'215,,215,,,,,,,,,,212,,212,,212,212,,,,215,,,,,,,,215,215,215,215,215',
'215,,215,215,212,,,,,215,,,212,212,212,212,,,,212,212,131,,131,,,212',
',,,,,215,131,131,131,,131,,131,131,,131,131,131,131,,,,212,,,,,,,,,',
',,131,,,,131,131,,,131,131,131,131,131,131,,131,131,130,,130,,,131,',
',,,,,130,130,130,,130,,130,130,,130,130,130,130,,,,131,,,,,,,,,,,,130',
',,,130,130,,,130,130,130,130,130,130,,130,130,128,,128,,,130,,,,,,,128',
'128,128,,128,213,128,128,,128,128,128,128,,,,130,,,213,,213,,213,213',
',,,128,,,,128,128,,,128,128,128,128,128,128,,128,128,213,,,,,128,,,213',
'213,213,213,213,213,,213,213,216,,,,,213,,,,,,128,,216,216,,216,211',
'216,216,,216,,,,,,,213,,,211,,211,,211,211,,,,216,,,,,,,,216,216,216',
'216,216,216,,216,216,211,,,,,216,,,211,211,211,211,,,,211,211,261,,261',
',,211,,,,,,216,261,261,261,,261,217,261,261,,261,261,261,261,,,,211',
',217,217,,217,,217,217,,217,,261,,,,261,261,,,261,261,261,261,261,261',
',261,261,217,,,,,261,,,217,217,217,217,217,217,,217,217,365,,,,,217',
',,,,,261,365,365,365,,365,208,365,365,,365,365,365,365,,,,217,,,208',
',208,,208,208,,,,365,,,,365,365,,162,365,365,365,365,365,365,,365,365',
'208,,162,162,162,365,162,,162,162,,162,162,162,162,208,208,,,,,,208',
',,,,,365,,162,,,,162,162,,366,162,162,162,162,162,162,,162,162,,,366',
'366,366,162,366,209,366,366,,366,366,366,366,,162,162,,,,209,,209,,209',
'209,,162,,366,,,,366,366,,367,366,366,366,366,366,366,,366,366,209,',
'367,367,367,366,367,210,367,367,,367,367,367,367,209,209,,,,,210,209',
'210,,210,210,,366,,367,,,,367,367,,368,367,367,367,367,367,367,,367',
'367,210,,368,368,368,367,368,,368,368,,368,368,368,368,210,210,,,,,',
'210,,,,,,367,,368,,,,368,368,,369,368,368,368,368,368,368,,368,368,',
',369,369,369,368,369,,369,369,,369,369,369,369,,,,,,,,,,,,,,368,,369',
',,,369,369,,,369,369,369,369,369,369,234,369,369,,,,,,369,,,,234,234',
'234,234,234,,234,234,218,234,234,234,234,,,,,,,369,,218,218,,218,,218',
'218,234,218,,,234,234,,,234,234,234,234,234,234,,234,234,,,,218,,234',
',,,,,218,218,218,218,218,218,174,218,218,,,,,,218,,,234,174,174,174',
'174,174,,174,174,207,174,174,174,174,,,,,,,218,,,207,,207,,207,207,174',
',,,174,174,,214,174,174,174,174,174,174,,174,174,,,,207,214,174,214',
',214,214,,,,207,207,,,206,207,207,,,,,,207,,,174,,214,206,,206,,206',
'206,385,214,214,214,214,214,214,,214,214,,207,385,385,385,214,385,,385',
'385,206,385,385,385,385,,,,,,206,206,,,,206,206,,214,,385,,206,,385',
'385,,,385,385,385,385,385,385,221,385,385,,,221,,,385,,,206,221,221',
'221,,221,,221,221,,221,221,221,221,,,,,,,385,,,,,,,,,221,,,,221,221',
',201,221,221,221,221,221,221,,221,221,,,201,201,201,221,201,,201,201',
',201,201,201,201,,,,,,,,,,,,,,221,,201,,,,201,201,,,201,201,201,201',
'201,201,401,201,201,,,,,,201,,,,401,401,401,401,401,,401,401,,401,401',
'401,401,,,,,,,201,,,,,,,,,401,,,,401,401,,9,401,401,401,401,401,401',
',401,401,,,9,9,9,401,9,,9,9,,9,9,9,9,,,,,,,,,,,,,,401,,9,,,,9,9,,220',
'9,9,9,9,9,9,,9,9,,,220,220,220,9,220,,220,220,,220,220,220,220,,,,,',
',,,,,,,,9,,220,,,,,220,,219,220,220,220,220,220,220,,220,220,,,219,219',
'219,220,219,,219,219,,219,219,219,219,,,,,,,,,,,,,,220,,219,,,,,,,229',
'219,219,219,219,219,219,,219,219,,,229,229,229,219,229,,229,229,,229',
'229,229,229,,,,,,,,,,,,,,219,,229,,,,229,229,,,229,229,229,229,229,229',
',229,229,,228,228,228,228,229,228,228,228,,228,,228,228,,,,,,,228,228',
'228,,,,228,,229,,,,,,,,,,228,228,,,,,,,,,,,,228,228,228,228,,228,228',
'321,321,321,321,,321,321,321,,321,,321,321,,,,,,,321,321,321,,,,321',
',,,,,,,,,,,321,321,,,,,,,,,,,,321,321,321,321,,321,321,288,288,288,288',
',288,288,288,,288,,288,288,,,,,,,288,288,288,,,,288,,,,,,,,,,,,288,288',
',,,,,,,,,,,288,288,288,288,,288,288,290,290,290,290,,290,290,290,,290',
',290,290,,,,,,,290,290,290,,,,290,,,,,,,,,,,,290,290,,,,,,,,,,,,290',
'290,290,290,,290,290,445,445,445,445,,445,445,445,,445,,445,445,,,,',
',,445,445,445,,,,445,,,,,,,,,,,,445,445,,,,,,,,,,,,445,445,445,445,',
'445,445' ]
        racc_action_check = arr = ::Array.new(7251, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
    -2,   395,   nil,   nil,   118,   376,   nil,   233,   375,  6760,
   444,   504,    97,   nil,   nil,   650,   710,   770,   830,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   278,   291,   318,  1096,  1156,  1216,   299,    22,
   229,  1526,   298,   218,   215,   nil,   nil,   nil,   nil,  1774,
  1834,  1920,   nil,   nil,   nil,   nil,  1980,   nil,   221,   225,
   nil,  5619,   nil,   289,  2306,   273,  2426,  2486,  2546,  2606,
  2666,  2726,  2786,  2846,  2906,  2995,  3055,  3115,  3175,  3235,
  3295,  3355,  3415,  3475,  3535,  3595,  3655,  3715,  3775,  3835,
  3895,  3955,  4015,  4075,  4135,  4221,   239,   267,  4401,  4461,
   264,   262,  4667,   217,   nil,   nil,   nil,   nil,   nil,  2993,
     9,  2070,  1924,   156,   nil,   161,   120,  5233,  5879,   nil,
  5822,  5765,   127,   125,  2186,   136,   nil,   109,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    74,   nil,    66,   nil,    57,
   nil,   106,   nil,   nil,     1,   nil,   193,   nil,   nil,   170,
  2366,   288,  6148,  2066,   nil,   203,   nil,   nil,   nil,   nil,
   227,   283,   310,   334,  6464,   366,  1456,    -1,    15,    -2,
   976,   384,   178,   nil,   nil,   111,   217,   188,     8,   308,
   183,    24,    75,    77,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,  6659,     9,  2999,  1718,  1632,  6538,  6484,  6118,  6212,
  6259,  5970,  5708,  5896,  6511,  5691,  5953,  6044,  6410,  6854,
  6807,  6612,   nil,   nil,  1276,   390,   314,   nil,  6934,  6901,
   294,   nil,   317,   290,  6390,   nil,   269,   nil,   -24,   nil,
   nil,  1542,   nil,   256,   nil,   nil,   nil,   nil,   nil,   241,
   203,   -17,   231,   nil,   -11,   nil,  1628,  1714,  2126,   202,
   200,  6027,   128,   574,   -18,    -3,  4907,    12,    58,   nil,
  5319,  5379,   nil,   nil,   nil,   nil,  5439,   nil,   nil,   nil,
   nil,    91,   nil,   nil,   nil,   nil,   106,   116,  7048,   137,
  7105,  5559,  5499,  5147,   nil,  5087,  5027,   173,   nil,   163,
   nil,   186,   nil,   194,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   197,
  4967,  6991,   204,   nil,    68,   nil,   213,   220,   nil,   162,
   -28,  4847,   nil,   nil,  4787,  4727,   nil,   236,   104,   249,
   234,    -4,  4607,   nil,  4521,  4341,  4281,   276,   nil,   900,
   nil,   nil,  2246,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   219,    98,   280,   nil,   nil,  6101,  6195,  6242,  6289,  6336,
   299,  1396,   247,   395,   nil,   nil,   316,  1336,   nil,   nil,
   nil,   311,   nil,   nil,   nil,  6558,    18,    58,   nil,  1036,
   337,   318,   nil,   344,   345,   nil,   nil,   345,   nil,   nil,
   347,  6713,   916,   nil,   361,   nil,   nil,   365,   334,   nil,
   nil,   nil,   nil,   nil,   368,   nil,   nil,   nil,   nil,   590,
   nil,   324,   238,   nil,   nil,  5211,   382,   nil,   nil,   nil,
    58,   nil,   386,   nil,   387,   nil,   390,   nil,   nil,   100,
   nil,   362,   nil,   nil,   nil,  7162,   nil,   nil ]

racc_action_default = [
    -3,  -250,    -1,    -2,    -4,    -5,    -8,   -10,   -16,   -21,
  -250,  -250,  -166,   -33,   -34,  -250,  -250,  -250,  -250,   -61,
   -62,   -63,   -64,   -65,   -66,   -67,   -68,   -69,   -70,   -71,
   -72,   -73,   -74,   -75,   -76,   -77,   -78,   -79,   -80,   -81,
   -82,   -83,   -84,   -89,   -93,  -250,  -250,  -250,  -250,  -250,
  -250,  -250,  -250,  -200,  -223,  -182,  -183,  -184,  -185,  -250,
  -250,  -250,  -196,  -197,  -198,  -199,  -250,  -202,  -250,  -215,
  -218,  -250,  -224,  -250,  -250,    -7,  -250,  -250,  -250,  -250,
  -250,  -250,  -250,  -250,  -129,  -250,  -250,  -250,  -250,  -250,
  -250,  -250,  -250,  -250,  -250,  -250,  -250,  -250,  -250,  -250,
  -250,  -250,  -250,  -250,  -250,  -250,  -250,  -124,  -249,  -249,
   -22,   -23,  -250,  -249,  -141,  -163,  -164,  -165,  -166,   -46,
  -166,   -47,   -54,  -250,   -90,  -250,  -250,  -250,  -250,  -100,
  -250,  -250,  -249,  -249,  -250,  -225,  -150,  -152,  -153,  -154,
  -155,  -156,  -158,  -159,  -200,  -249,   -14,  -225,  -187,  -225,
  -189,  -250,  -192,  -193,  -250,  -201,  -250,  -206,  -209,  -250,
  -213,  -250,  -250,  -250,   448,    -6,    -9,   -11,   -12,   -13,
   -17,   -18,   -19,   -20,  -250,  -225,  -250,   -82,   -83,   -84,
  -236,  -242,  -230,  -130,  -133,  -250,  -233,  -247,  -231,  -239,
  -245,  -183,  -184,  -185,  -229,  -234,  -235,  -237,  -238,  -240,
  -248,   -59,  -250,   -36,   -37,   -38,   -39,   -40,   -41,   -42,
   -43,   -44,   -45,   -48,   -49,   -50,   -51,   -52,   -53,   -55,
   -56,  -250,   -57,  -118,  -250,  -225,   -86,   -94,  -129,  -128,
  -250,  -127,  -250,  -227,  -250,   -28,  -249,  -167,  -250,   -58,
   -95,  -250,   -98,  -225,  -170,  -172,  -173,  -174,  -175,  -177,
  -250,  -250,  -180,  -223,  -250,   -92,  -250,  -250,  -250,  -250,
  -250,  -250,  -249,  -226,  -250,  -250,  -226,  -250,  -250,  -190,
  -250,  -250,  -203,  -204,  -205,  -207,  -250,  -210,  -211,  -212,
  -214,  -225,  -216,  -219,  -221,  -222,    -8,  -250,  -129,  -250,
  -226,  -250,  -250,  -250,   -35,  -250,  -250,  -225,  -120,  -250,
   -88,  -225,  -132,  -250,  -230,  -231,  -232,  -233,  -236,  -239,
  -241,  -242,  -243,  -244,  -245,  -246,  -247,  -125,  -126,  -250,
  -228,  -129,  -250,  -144,  -250,  -168,  -225,  -250,   -97,  -250,
  -226,  -250,  -178,  -179,  -250,  -250,   -91,  -250,  -103,  -250,
  -109,  -250,  -250,  -113,  -249,  -249,  -250,  -250,  -160,  -250,
  -151,  -157,  -249,   -15,  -186,  -188,  -191,  -194,  -195,  -208,
  -250,  -250,  -225,   -26,  -131,  -136,  -134,  -135,   -60,  -122,
  -250,  -226,   -85,  -250,   -25,   -29,  -225,  -249,  -145,  -146,
  -147,  -250,   -96,   -99,  -171,  -176,  -250,  -103,  -102,  -250,
  -250,  -109,  -108,  -250,  -250,  -112,  -114,  -250,  -142,  -143,
  -250,  -250,  -250,  -161,  -250,  -217,  -220,  -250,   -30,  -119,
  -121,   -87,  -123,   -27,  -250,  -169,  -181,  -101,  -104,  -250,
  -107,  -250,  -249,  -137,  -138,  -129,  -250,  -149,  -162,   -24,
   -31,  -140,  -250,  -106,  -250,  -111,  -250,  -116,  -117,  -250,
  -148,  -227,  -105,  -110,  -115,  -250,  -139,   -32 ]

racc_goto_table = [
     2,   119,   121,   122,   124,   175,   233,   114,   223,   138,
   140,   231,   231,   202,   155,   319,   364,   283,   243,   343,
   388,   252,   350,    75,   262,   436,   397,   400,   297,   110,
   111,   128,   130,   131,   404,   236,   267,   342,   268,   230,
   232,   392,   418,   132,   133,   147,   149,   145,   240,   222,
   375,   322,   378,   281,   259,   260,   252,   162,   347,   414,
   407,   351,   384,   123,   289,   333,   332,   265,   357,   417,
   174,   201,   203,   204,   205,   206,   207,   208,   209,   210,
   211,   212,   213,   214,   215,   216,   217,   218,   219,   220,
   221,   225,   420,   165,   229,   229,   277,   278,   234,   170,
   171,   172,   173,   396,   146,   146,   154,     3,   403,   275,
   276,   157,   274,   254,   299,   114,   158,   160,   279,     1,
   261,   166,   167,   168,   169,   nil,   nil,   nil,   298,   nil,
   326,   nil,   329,   252,   nil,   nil,   nil,   nil,   nil,   323,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   138,   140,   301,
   146,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   280,   nil,   121,   287,   nil,   348,   128,   130,   131,   nil,
   360,   364,   146,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   132,   133,   114,   nil,   145,   370,   300,   nil,   nil,
   373,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   286,   362,
   221,   nil,   nil,   nil,   nil,   381,   406,   nil,   nil,   nil,
   nil,   138,   140,   447,   359,   252,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   327,   376,   nil,   201,   nil,   nil,   399,   399,   nil,
   nil,   408,   nil,   nil,   nil,   399,   337,   339,   nil,   nil,
   nil,   nil,   386,   nil,   nil,   413,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   410,   nil,   365,   366,   367,
   399,   368,   369,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   234,   138,   140,   nil,
   nil,   353,   nil,   nil,   nil,   154,   358,   385,   nil,   379,
   201,   157,   nil,   nil,   441,   437,   nil,   nil,   201,   nil,
   nil,   nil,   401,   411,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   439,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   221,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   128,   nil,   nil,   nil,   nil,
   353,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   426,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   234,   nil,   nil,   432,
   nil,   434,   438 ]

racc_goto_check = [
     2,    10,    10,    10,    40,    11,    13,    60,    53,    38,
    37,    52,    52,    19,    83,    14,    57,    91,    45,    50,
    47,    39,    68,     5,    15,    51,    62,    62,    54,     9,
     9,    10,    10,    10,    62,    61,    15,    49,    15,    56,
    56,    48,    46,    60,    60,     8,     8,    60,    44,    20,
    16,    64,    65,    45,    61,    61,    39,    10,    67,    62,
    12,    70,    71,     6,    15,    72,    74,    61,    78,    47,
    10,    10,    10,    10,    10,    10,    10,    10,    10,    10,
    10,    10,    10,    10,    10,    10,    10,    10,    10,    10,
    10,     8,    48,     5,    10,    10,    79,    80,    10,     9,
     9,     9,     9,    50,     6,     6,     6,     3,    68,    84,
    85,     6,    87,     8,    15,    60,    88,    89,    90,     1,
    10,     6,     6,     6,     6,   nil,   nil,   nil,    53,   nil,
    45,   nil,    15,    39,   nil,   nil,   nil,   nil,   nil,    52,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    38,    37,    11,
     6,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
     2,   nil,    10,     2,   nil,    52,    10,    10,    10,   nil,
    15,    57,     6,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    60,    60,    60,   nil,    60,    15,    40,   nil,   nil,
    15,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,     6,    11,
    10,   nil,   nil,   nil,   nil,    15,    91,   nil,   nil,   nil,
   nil,    38,    37,    14,    83,    39,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,     2,    11,   nil,    10,   nil,   nil,    52,    52,   nil,
   nil,    15,   nil,   nil,   nil,    52,     2,     2,   nil,   nil,
   nil,   nil,    19,   nil,   nil,    15,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    53,   nil,    10,    10,    10,
    52,    10,    10,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    10,    38,    37,   nil,
   nil,     6,   nil,   nil,   nil,     6,     6,    10,   nil,    60,
    10,     6,   nil,   nil,    13,    52,   nil,   nil,    10,   nil,
   nil,   nil,    10,    40,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    11,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    10,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    10,   nil,   nil,   nil,   nil,
     6,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,     2,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    10,   nil,   nil,     2,
   nil,     2,     2 ]

racc_goto_pointer = [
   nil,   119,     0,   107,   nil,    19,    45,   nil,   -14,    19,
   -14,   -79,  -302,  -106,  -218,  -111,  -270,   nil,   nil,   -72,
   -55,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   -41,   -42,  -105,
   -39,   nil,   nil,   nil,   -77,  -108,  -347,  -318,  -299,  -221,
  -239,  -397,   -97,   -96,  -196,   nil,   -69,  -274,   nil,   nil,
    -5,   -78,  -318,   nil,  -185,  -272,   nil,  -204,  -241,   nil,
  -203,  -268,  -186,   nil,  -184,   nil,   nil,   nil,  -202,   -63,
   -62,   nil,   nil,   -52,   -47,   -46,   nil,   -44,    48,    48,
   -42,  -145 ]

racc_goto_default = [
   nil,   nil,   398,   nil,     4,     5,     6,     7,   nil,     8,
     9,   nil,   nil,   nil,   nil,   nil,   235,    13,    14,   341,
   nil,    19,    20,    21,    22,    23,    24,    25,    26,    27,
    28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
   nil,    43,    44,   125,   nil,   nil,   129,   nil,   nil,   nil,
   nil,   nil,   237,   nil,   nil,   107,   nil,   183,   185,   184,
    50,   nil,   nil,   113,   nil,   nil,   135,   nil,   136,   137,
   141,   244,   245,   246,   247,   248,   251,   151,   153,    62,
    63,    64,    66,   nil,   nil,   nil,   156,   nil,   nil,   nil,
   nil,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 94, :_reduce_1,
  1, 94, :_reduce_2,
  0, 94, :_reduce_3,
  1, 95, :_reduce_4,
  1, 97, :_reduce_5,
  3, 97, :_reduce_6,
  2, 97, :_reduce_7,
  1, 98, :_reduce_8,
  3, 98, :_reduce_9,
  1, 99, :_reduce_none,
  3, 99, :_reduce_11,
  3, 99, :_reduce_12,
  3, 99, :_reduce_13,
  1, 101, :_reduce_14,
  3, 101, :_reduce_15,
  1, 100, :_reduce_none,
  3, 100, :_reduce_17,
  3, 100, :_reduce_18,
  3, 100, :_reduce_19,
  3, 100, :_reduce_20,
  1, 102, :_reduce_none,
  2, 102, :_reduce_22,
  2, 102, :_reduce_23,
  7, 102, :_reduce_24,
  5, 102, :_reduce_25,
  5, 102, :_reduce_26,
  4, 109, :_reduce_27,
  1, 106, :_reduce_28,
  3, 106, :_reduce_29,
  1, 105, :_reduce_30,
  2, 105, :_reduce_31,
  4, 105, :_reduce_32,
  1, 103, :_reduce_none,
  1, 103, :_reduce_none,
  4, 103, :_reduce_35,
  3, 103, :_reduce_36,
  3, 103, :_reduce_37,
  3, 103, :_reduce_38,
  3, 103, :_reduce_39,
  3, 103, :_reduce_40,
  3, 103, :_reduce_41,
  3, 103, :_reduce_42,
  3, 103, :_reduce_43,
  3, 103, :_reduce_44,
  3, 103, :_reduce_45,
  2, 103, :_reduce_46,
  2, 103, :_reduce_47,
  3, 103, :_reduce_48,
  3, 103, :_reduce_49,
  3, 103, :_reduce_50,
  3, 103, :_reduce_51,
  3, 103, :_reduce_52,
  3, 103, :_reduce_53,
  2, 103, :_reduce_54,
  3, 103, :_reduce_55,
  3, 103, :_reduce_56,
  3, 103, :_reduce_57,
  3, 103, :_reduce_58,
  1, 112, :_reduce_59,
  3, 112, :_reduce_60,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  1, 110, :_reduce_80,
  1, 110, :_reduce_81,
  1, 110, :_reduce_82,
  1, 110, :_reduce_83,
  1, 110, :_reduce_84,
  5, 111, :_reduce_85,
  3, 111, :_reduce_86,
  6, 111, :_reduce_87,
  4, 111, :_reduce_88,
  1, 115, :_reduce_89,
  2, 115, :_reduce_90,
  4, 134, :_reduce_91,
  3, 134, :_reduce_92,
  1, 134, :_reduce_93,
  3, 135, :_reduce_94,
  2, 133, :_reduce_95,
  3, 137, :_reduce_96,
  2, 137, :_reduce_97,
  2, 136, :_reduce_98,
  4, 136, :_reduce_99,
  2, 118, :_reduce_100,
  5, 139, :_reduce_101,
  4, 139, :_reduce_102,
  0, 140, :_reduce_none,
  2, 140, :_reduce_104,
  4, 140, :_reduce_105,
  3, 140, :_reduce_106,
  6, 119, :_reduce_107,
  5, 119, :_reduce_108,
  0, 141, :_reduce_none,
  4, 141, :_reduce_110,
  3, 141, :_reduce_111,
  5, 117, :_reduce_112,
  1, 142, :_reduce_113,
  2, 142, :_reduce_114,
  5, 143, :_reduce_115,
  1, 144, :_reduce_none,
  1, 144, :_reduce_none,
  1, 113, :_reduce_none,
  4, 113, :_reduce_119,
  1, 147, :_reduce_120,
  3, 147, :_reduce_121,
  3, 146, :_reduce_122,
  6, 116, :_reduce_123,
  2, 116, :_reduce_124,
  3, 148, :_reduce_125,
  3, 148, :_reduce_126,
  1, 149, :_reduce_none,
  1, 149, :_reduce_none,
  0, 104, :_reduce_129,
  1, 104, :_reduce_130,
  3, 104, :_reduce_131,
  1, 151, :_reduce_none,
  1, 151, :_reduce_none,
  3, 150, :_reduce_134,
  3, 150, :_reduce_135,
  3, 150, :_reduce_136,
  6, 120, :_reduce_137,
  6, 121, :_reduce_138,
  8, 122, :_reduce_139,
  7, 123, :_reduce_140,
  1, 156, :_reduce_141,
  1, 155, :_reduce_none,
  1, 155, :_reduce_none,
  1, 157, :_reduce_none,
  2, 157, :_reduce_145,
  1, 158, :_reduce_none,
  1, 158, :_reduce_none,
  7, 124, :_reduce_148,
  6, 124, :_reduce_149,
  1, 159, :_reduce_150,
  3, 159, :_reduce_151,
  1, 161, :_reduce_none,
  1, 161, :_reduce_none,
  1, 161, :_reduce_154,
  1, 161, :_reduce_none,
  1, 162, :_reduce_156,
  3, 162, :_reduce_157,
  1, 163, :_reduce_none,
  1, 163, :_reduce_none,
  1, 160, :_reduce_none,
  2, 160, :_reduce_161,
  6, 126, :_reduce_162,
  1, 153, :_reduce_none,
  1, 153, :_reduce_none,
  1, 153, :_reduce_none,
  1, 153, :_reduce_166,
  1, 154, :_reduce_167,
  2, 154, :_reduce_168,
  4, 154, :_reduce_169,
  1, 138, :_reduce_170,
  3, 138, :_reduce_171,
  1, 164, :_reduce_none,
  1, 164, :_reduce_none,
  1, 165, :_reduce_none,
  1, 165, :_reduce_none,
  3, 167, :_reduce_176,
  1, 167, :_reduce_177,
  2, 168, :_reduce_178,
  2, 166, :_reduce_179,
  1, 169, :_reduce_180,
  4, 169, :_reduce_181,
  1, 114, :_reduce_182,
  1, 127, :_reduce_183,
  1, 127, :_reduce_184,
  1, 127, :_reduce_185,
  4, 128, :_reduce_186,
  2, 128, :_reduce_187,
  4, 128, :_reduce_188,
  2, 128, :_reduce_189,
  3, 129, :_reduce_190,
  4, 129, :_reduce_191,
  2, 129, :_reduce_192,
  1, 170, :_reduce_193,
  3, 170, :_reduce_194,
  3, 171, :_reduce_195,
  1, 131, :_reduce_none,
  1, 131, :_reduce_none,
  1, 131, :_reduce_none,
  1, 172, :_reduce_199,
  1, 172, :_reduce_200,
  2, 173, :_reduce_201,
  1, 175, :_reduce_202,
  1, 177, :_reduce_203,
  1, 178, :_reduce_204,
  2, 176, :_reduce_205,
  1, 179, :_reduce_206,
  1, 180, :_reduce_207,
  2, 180, :_reduce_208,
  2, 174, :_reduce_209,
  2, 181, :_reduce_210,
  2, 181, :_reduce_211,
  3, 96, :_reduce_212,
  0, 183, :_reduce_none,
  1, 183, :_reduce_none,
  0, 182, :_reduce_215,
  2, 182, :_reduce_216,
  4, 182, :_reduce_217,
  1, 125, :_reduce_218,
  3, 125, :_reduce_219,
  5, 125, :_reduce_220,
  1, 184, :_reduce_none,
  1, 184, :_reduce_none,
  1, 132, :_reduce_223,
  1, 130, :_reduce_224,
  0, 108, :_reduce_none,
  1, 108, :_reduce_226,
  0, 107, :_reduce_none,
  1, 107, :_reduce_none,
  1, 152, :_reduce_none,
  1, 152, :_reduce_none,
  1, 152, :_reduce_none,
  1, 152, :_reduce_none,
  1, 152, :_reduce_none,
  1, 152, :_reduce_none,
  1, 152, :_reduce_none,
  1, 152, :_reduce_none,
  1, 152, :_reduce_none,
  1, 152, :_reduce_none,
  1, 152, :_reduce_none,
  1, 152, :_reduce_none,
  1, 152, :_reduce_none,
  1, 152, :_reduce_none,
  1, 152, :_reduce_none,
  1, 152, :_reduce_none,
  1, 152, :_reduce_none,
  1, 152, :_reduce_none,
  1, 152, :_reduce_none,
  1, 152, :_reduce_none,
  0, 145, :_reduce_249 ]

racc_reduce_n = 250

racc_shift_n = 448

racc_token_table = {
  false => 0,
  :error => 1,
  :STRING => 2,
  :DQPRE => 3,
  :DQMID => 4,
  :DQPOST => 5,
  :WORD => 6,
  :LBRACK => 7,
  :RBRACK => 8,
  :LBRACE => 9,
  :RBRACE => 10,
  :SYMBOL => 11,
  :FARROW => 12,
  :COMMA => 13,
  :TRUE => 14,
  :FALSE => 15,
  :EQUALS => 16,
  :APPENDS => 17,
  :DELETES => 18,
  :LESSEQUAL => 19,
  :NOTEQUAL => 20,
  :DOT => 21,
  :COLON => 22,
  :LLCOLLECT => 23,
  :RRCOLLECT => 24,
  :QMARK => 25,
  :LPAREN => 26,
  :RPAREN => 27,
  :ISEQUAL => 28,
  :GREATEREQUAL => 29,
  :GREATERTHAN => 30,
  :LESSTHAN => 31,
  :IF => 32,
  :ELSE => 33,
  :DEFINE => 34,
  :ELSIF => 35,
  :VARIABLE => 36,
  :CLASS => 37,
  :INHERITS => 38,
  :NODE => 39,
  :BOOLEAN => 40,
  :NAME => 41,
  :SEMIC => 42,
  :CASE => 43,
  :DEFAULT => 44,
  :AT => 45,
  :ATAT => 46,
  :LCOLLECT => 47,
  :RCOLLECT => 48,
  :CLASSREF => 49,
  :NOT => 50,
  :OR => 51,
  :AND => 52,
  :UNDEF => 53,
  :PARROW => 54,
  :PLUS => 55,
  :MINUS => 56,
  :TIMES => 57,
  :DIV => 58,
  :LSHIFT => 59,
  :RSHIFT => 60,
  :UMINUS => 61,
  :MATCH => 62,
  :NOMATCH => 63,
  :REGEX => 64,
  :IN_EDGE => 65,
  :OUT_EDGE => 66,
  :IN_EDGE_SUB => 67,
  :OUT_EDGE_SUB => 68,
  :IN => 69,
  :UNLESS => 70,
  :PIPE => 71,
  :LAMBDA => 72,
  :SELBRACE => 73,
  :NUMBER => 74,
  :HEREDOC => 75,
  :SUBLOCATE => 76,
  :RENDER_STRING => 77,
  :RENDER_EXPR => 78,
  :EPP_START => 79,
  :EPP_END => 80,
  :EPP_END_TRIM => 81,
  :FUNCTION => 82,
  :PRIVATE => 83,
  :ATTR => 84,
  :TYPE => 85,
  :LOW => 86,
  :APPLICATION => 87,
  :PRODUCES => 88,
  :HIGH => 89,
  :LISTSTART => 90,
  :SPLAT => 91,
  :MODULO => 92 }

racc_nt_base = 93

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "STRING",
  "DQPRE",
  "DQMID",
  "DQPOST",
  "WORD",
  "LBRACK",
  "RBRACK",
  "LBRACE",
  "RBRACE",
  "SYMBOL",
  "FARROW",
  "COMMA",
  "TRUE",
  "FALSE",
  "EQUALS",
  "APPENDS",
  "DELETES",
  "LESSEQUAL",
  "NOTEQUAL",
  "DOT",
  "COLON",
  "LLCOLLECT",
  "RRCOLLECT",
  "QMARK",
  "LPAREN",
  "RPAREN",
  "ISEQUAL",
  "GREATEREQUAL",
  "GREATERTHAN",
  "LESSTHAN",
  "IF",
  "ELSE",
  "DEFINE",
  "ELSIF",
  "VARIABLE",
  "CLASS",
  "INHERITS",
  "NODE",
  "BOOLEAN",
  "NAME",
  "SEMIC",
  "CASE",
  "DEFAULT",
  "AT",
  "ATAT",
  "LCOLLECT",
  "RCOLLECT",
  "CLASSREF",
  "NOT",
  "OR",
  "AND",
  "UNDEF",
  "PARROW",
  "PLUS",
  "MINUS",
  "TIMES",
  "DIV",
  "LSHIFT",
  "RSHIFT",
  "UMINUS",
  "MATCH",
  "NOMATCH",
  "REGEX",
  "IN_EDGE",
  "OUT_EDGE",
  "IN_EDGE_SUB",
  "OUT_EDGE_SUB",
  "IN",
  "UNLESS",
  "PIPE",
  "LAMBDA",
  "SELBRACE",
  "NUMBER",
  "HEREDOC",
  "SUBLOCATE",
  "RENDER_STRING",
  "RENDER_EXPR",
  "EPP_START",
  "EPP_END",
  "EPP_END_TRIM",
  "FUNCTION",
  "PRIVATE",
  "ATTR",
  "TYPE",
  "LOW",
  "APPLICATION",
  "PRODUCES",
  "HIGH",
  "LISTSTART",
  "SPLAT",
  "MODULO",
  "$start",
  "program",
  "statements",
  "epp_expression",
  "syntactic_statements",
  "syntactic_statement",
  "assignment",
  "relationship",
  "assignments",
  "resource",
  "expression",
  "attribute_operations",
  "additional_resource_bodies",
  "resource_bodies",
  "endsemi",
  "endcomma",
  "resource_body",
  "primary_expression",
  "call_function_expression",
  "expressions",
  "selector_entries",
  "variable",
  "call_method_with_lambda_expression",
  "collection_expression",
  "case_expression",
  "if_expression",
  "unless_expression",
  "definition_expression",
  "application_expression",
  "produces_expression",
  "hostclass_expression",
  "node_definition_expression",
  "epp_render_expression",
  "function_definition",
  "reserved_word",
  "array",
  "hash",
  "regex",
  "quotedtext",
  "type",
  "lambda",
  "call_method_expression",
  "named_access",
  "lambda_parameter_list",
  "lambda_rest",
  "parameters",
  "if_part",
  "else",
  "unless_else",
  "case_options",
  "case_option",
  "options_statements",
  "nil",
  "selector_entry",
  "selector_entry_list",
  "collect_query",
  "optional_query",
  "attribute_operation",
  "attribute_name",
  "keyword",
  "classname",
  "parameter_list",
  "opt_statements",
  "stacked_classname",
  "classparent",
  "classnameordefault",
  "hostnames",
  "nodeparent",
  "hostname",
  "dotted_name",
  "name_or_number",
  "parameter",
  "untyped_parameter",
  "typed_parameter",
  "regular_parameter",
  "splat_parameter",
  "parameter_type",
  "hashpairs",
  "hashpair",
  "string",
  "dq_string",
  "heredoc",
  "dqpre",
  "dqrval",
  "dqpost",
  "dqmid",
  "text_expression",
  "dqtail",
  "sublocated_text",
  "epp_parameters_list",
  "optional_statements",
  "epp_end" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'egrammar.ra', 67)
  def _reduce_1(val, _values, result)
     result = create_program(Factory.block_or_expression(*val[0])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 68)
  def _reduce_2(val, _values, result)
     result = create_program(Factory.block_or_expression(*val[0])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 69)
  def _reduce_3(val, _values, result)
     result = create_empty_program() 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 73)
  def _reduce_4(val, _values, result)
     result = transform_calls(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 80)
  def _reduce_5(val, _values, result)
     result = [val[0]]
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 81)
  def _reduce_6(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 82)
  def _reduce_7(val, _values, result)
     result = val[0].push val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 89)
  def _reduce_8(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 90)
  def _reduce_9(val, _values, result)
     result = aryfy(val[0]).push(val[1]).push(val[2]) 
    result
  end
.,.,

# reduce 10 omitted

module_eval(<<'.,.,', 'egrammar.ra', 95)
  def _reduce_11(val, _values, result)
     result = val[0].set(val[2])      ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 96)
  def _reduce_12(val, _values, result)
     result = val[0].plus_set(val[2]) ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 97)
  def _reduce_13(val, _values, result)
     result = val[0].minus_set(val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 100)
  def _reduce_14(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 101)
  def _reduce_15(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 16 omitted

module_eval(<<'.,.,', 'egrammar.ra', 105)
  def _reduce_17(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 106)
  def _reduce_18(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 107)
  def _reduce_19(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 108)
  def _reduce_20(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

# reduce 21 omitted

module_eval(<<'.,.,', 'egrammar.ra', 117)
  def _reduce_22(val, _values, result)
          result = val[1]
      unless Factory.set_resource_form(result, :virtual)
        # This is equivalent to a syntax error - additional semantic restrictions apply
        error val[0], "Virtual (@) can only be applied to a Resource Expression"
      end
      # relocate the result
      loc result, val[0], val[1]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 128)
  def _reduce_23(val, _values, result)
          result = val[1]
      unless Factory.set_resource_form(result, :exported)
        # This is equivalent to a syntax error - additional semantic restrictions apply
        error val[0], "Exported (@@) can only be applied to a Resource Expression"
      end
      # relocate the result
      loc result, val[0], val[1]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 139)
  def _reduce_24(val, _values, result)
          bodies = [Factory.RESOURCE_BODY(val[2], val[4])] + val[5]
      result = Factory.RESOURCE(val[0], bodies)
      loc result, val[0], val[6]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 146)
  def _reduce_25(val, _values, result)
            result = Factory.RESOURCE(Factory.fqn(token_text(val[0])), val[2])
        loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 155)
  def _reduce_26(val, _values, result)
           result = case Factory.resource_shape(val[0])
       when :resource, :class
        # This catches deprecated syntax.
        # If the attribute operations does not include +>, then the found expression
        # is actually a LEFT followed by LITERAL_HASH
        #
        unless tmp = transform_resource_wo_title(val[0], val[2])
          error val[1], "Syntax error resource body without title or hash with +>"
        end
        tmp
      when :defaults
        Factory.RESOURCE_DEFAULTS(val[0], val[2])
      when :override
        # This was only done for override in original - TODO should it be here at all
        Factory.RESOURCE_OVERRIDE(val[0], val[2])
      else
        error val[0], "Expression is not valid as a resource, resource-default, or resource-override"
      end
     loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 177)
  def _reduce_27(val, _values, result)
     result = Factory.RESOURCE_BODY(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 180)
  def _reduce_28(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 181)
  def _reduce_29(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 187)
  def _reduce_30(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 188)
  def _reduce_31(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 189)
  def _reduce_32(val, _values, result)
     result = val[2] 
    result
  end
.,.,

# reduce 33 omitted

# reduce 34 omitted

module_eval(<<'.,.,', 'egrammar.ra', 196)
  def _reduce_35(val, _values, result)
     result = val[0][*val[2]]         ; loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 197)
  def _reduce_36(val, _values, result)
     result = val[0].in val[2]        ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 198)
  def _reduce_37(val, _values, result)
     result = val[0] =~  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 199)
  def _reduce_38(val, _values, result)
     result = val[0].mne val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 200)
  def _reduce_39(val, _values, result)
     result = val[0] +   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 201)
  def _reduce_40(val, _values, result)
     result = val[0] -   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 202)
  def _reduce_41(val, _values, result)
     result = val[0] /   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 203)
  def _reduce_42(val, _values, result)
     result = val[0] *   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 204)
  def _reduce_43(val, _values, result)
     result = val[0] %   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 205)
  def _reduce_44(val, _values, result)
     result = val[0] <<  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 206)
  def _reduce_45(val, _values, result)
     result = val[0] >>  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 207)
  def _reduce_46(val, _values, result)
     result = val[1].minus()          ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 208)
  def _reduce_47(val, _values, result)
     result = val[1].unfold()         ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 209)
  def _reduce_48(val, _values, result)
     result = val[0].ne  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 210)
  def _reduce_49(val, _values, result)
     result = val[0] ==  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 211)
  def _reduce_50(val, _values, result)
     result = val[0] >   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 212)
  def _reduce_51(val, _values, result)
     result = val[0] >=  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 213)
  def _reduce_52(val, _values, result)
     result = val[0] <   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 214)
  def _reduce_53(val, _values, result)
     result = val[0] <=  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 215)
  def _reduce_54(val, _values, result)
     result = val[1].not              ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 216)
  def _reduce_55(val, _values, result)
     result = val[0].and val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 217)
  def _reduce_56(val, _values, result)
     result = val[0].or  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 218)
  def _reduce_57(val, _values, result)
     result = val[0].select(*val[2])  ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 219)
  def _reduce_58(val, _values, result)
     result = val[1].paren()          ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 229)
  def _reduce_59(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 230)
  def _reduce_60(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 61 omitted

# reduce 62 omitted

# reduce 63 omitted

# reduce 64 omitted

# reduce 65 omitted

# reduce 66 omitted

# reduce 67 omitted

# reduce 68 omitted

# reduce 69 omitted

# reduce 70 omitted

# reduce 71 omitted

# reduce 72 omitted

# reduce 73 omitted

# reduce 74 omitted

# reduce 75 omitted

# reduce 76 omitted

# reduce 77 omitted

# reduce 78 omitted

# reduce 79 omitted

module_eval(<<'.,.,', 'egrammar.ra', 254)
  def _reduce_80(val, _values, result)
     result = Factory.NUMBER(val[0][:value])          ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 255)
  def _reduce_81(val, _values, result)
     result = Factory.literal(val[0][:value])         ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 256)
  def _reduce_82(val, _values, result)
     result = Factory.literal(:default)               ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 257)
  def _reduce_83(val, _values, result)
     result = Factory.literal(:undef)                 ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 258)
  def _reduce_84(val, _values, result)
     result = Factory.QNAME_OR_NUMBER(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 267)
  def _reduce_85(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, val[2])
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 271)
  def _reduce_86(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, [])
      loc result, val[0], val[2]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 275)
  def _reduce_87(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, val[2])
      loc result, val[0], val[4]
      result.lambda = val[5]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 280)
  def _reduce_88(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, [])
      loc result, val[0], val[2]
      result.lambda = val[3]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 288)
  def _reduce_89(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 289)
  def _reduce_90(val, _values, result)
     result = val[0]; val[0].lambda = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 292)
  def _reduce_91(val, _values, result)
     result = Factory.CALL_METHOD(val[0], val[2]); loc result, val[1], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 293)
  def _reduce_92(val, _values, result)
     result = Factory.CALL_METHOD(val[0], []); loc result, val[1], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 294)
  def _reduce_93(val, _values, result)
     result = Factory.CALL_METHOD(val[0], []); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 298)
  def _reduce_94(val, _values, result)
            result = val[0].dot(Factory.fqn(val[2][:value]))
        loc result, val[1], val[2]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 306)
  def _reduce_95(val, _values, result)
          result = Factory.LAMBDA(val[0][:value], val[1][:value])
      loc result, val[0][:start], val[1][:end]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 311)
  def _reduce_96(val, _values, result)
     result = {:end => val[2], :value =>val[1] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 312)
  def _reduce_97(val, _values, result)
     result = {:end => val[1], :value => nil } 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 316)
  def _reduce_98(val, _values, result)
     result = {:start => val[0], :value => [] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 317)
  def _reduce_99(val, _values, result)
     result = {:start => val[0], :value => val[1] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 325)
  def _reduce_100(val, _values, result)
          result = val[1]
      loc(result, val[0], val[1])
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 332)
  def _reduce_101(val, _values, result)
            result = Factory.IF(val[0], Factory.block_or_expression(*val[2]), val[4])
        loc(result, val[0], (val[4] ? val[4] : val[3]))
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 336)
  def _reduce_102(val, _values, result)
            result = Factory.IF(val[0], nil, val[3])
        loc(result, val[0], (val[3] ? val[3] : val[2]))
      
    result
  end
.,.,

# reduce 103 omitted

module_eval(<<'.,.,', 'egrammar.ra', 344)
  def _reduce_104(val, _values, result)
            result = val[1]
        loc(result, val[0], val[1])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 348)
  def _reduce_105(val, _values, result)
            result = Factory.block_or_expression(*val[2])
        loc result, val[0], val[3]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 352)
  def _reduce_106(val, _values, result)
            result = nil # don't think a nop is needed here either
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 359)
  def _reduce_107(val, _values, result)
          result = Factory.UNLESS(val[1], Factory.block_or_expression(*val[3]), val[5])
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 363)
  def _reduce_108(val, _values, result)
          result = Factory.UNLESS(val[1], nil, val[4])
      loc result, val[0], val[4]
    
    result
  end
.,.,

# reduce 109 omitted

module_eval(<<'.,.,', 'egrammar.ra', 373)
  def _reduce_110(val, _values, result)
            result = Factory.block_or_expression(*val[2])
        loc result, val[0], val[3]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 377)
  def _reduce_111(val, _values, result)
            result = nil # don't think a nop is needed here either
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 384)
  def _reduce_112(val, _values, result)
          result = Factory.CASE(val[1], *val[3])
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 390)
  def _reduce_113(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 391)
  def _reduce_114(val, _values, result)
     result = val[0].push val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 396)
  def _reduce_115(val, _values, result)
            result = Factory.WHEN(val[0], val[3]); loc result, val[1], val[4]
      
    result
  end
.,.,

# reduce 116 omitted

# reduce 117 omitted

# reduce 118 omitted

module_eval(<<'.,.,', 'egrammar.ra', 412)
  def _reduce_119(val, _values, result)
            result = val[1]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 417)
  def _reduce_120(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 418)
  def _reduce_121(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 423)
  def _reduce_122(val, _values, result)
     result = Factory.MAP(val[0], val[2]) ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 433)
  def _reduce_123(val, _values, result)
          result = Factory.COLLECT(val[0], val[1], val[3])
      loc result, val[0], val[5]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 437)
  def _reduce_124(val, _values, result)
          result = Factory.COLLECT(val[0], val[1], [])
      loc result, val[0], val[1]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 442)
  def _reduce_125(val, _values, result)
     result = Factory.VIRTUAL_QUERY(val[1])   ; loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 443)
  def _reduce_126(val, _values, result)
     result = Factory.EXPORTED_QUERY(val[1])  ; loc result, val[0], val[2] 
    result
  end
.,.,

# reduce 127 omitted

# reduce 128 omitted

module_eval(<<'.,.,', 'egrammar.ra', 452)
  def _reduce_129(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 453)
  def _reduce_130(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 454)
  def _reduce_131(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 132 omitted

# reduce 133 omitted

module_eval(<<'.,.,', 'egrammar.ra', 470)
  def _reduce_134(val, _values, result)
            result = Factory.ATTRIBUTE_OP(val[0][:value], :'=>', val[2])
        loc result, val[0], val[2]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 474)
  def _reduce_135(val, _values, result)
            result = Factory.ATTRIBUTE_OP(val[0][:value], :'+>', val[2])
        loc result, val[0], val[2]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 478)
  def _reduce_136(val, _values, result)
          result = Factory.ATTRIBUTES_OP(val[2]) ; loc result, val[0], val[2]
   
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 487)
  def _reduce_137(val, _values, result)
          result = add_definition(Factory.DEFINITION(classname(val[1][:value]), val[2], val[4]))
      loc result, val[0], val[5]
      # New lexer does not keep track of this, this is done in validation
      if @lexer.respond_to?(:'indefine=')
        @lexer.indefine = false
      end
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 498)
  def _reduce_138(val, _values, result)
        result = add_definition(Factory.APPLICATION(classname(val[1][:value]), val[2], val[4]))
    loc result, val[0], val[5]
  
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 507)
  def _reduce_139(val, _values, result)
        body = [Factory.RESOURCE_BODY(val[4], val[6])]
    resource = Factory.RESOURCE(val[2], body)
    Factory.set_resource_form(resource, :virtual)

    result = Factory.PRODUCES(classname(val[0][:value]), resource)
    loc result, val[0], val[7]
    add_produces(result)
  
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 522)
  def _reduce_140(val, _values, result)
          # Remove this class' name from the namestack as all nested classes have been parsed
      namepop
      result = add_definition(Factory.HOSTCLASS(classname(val[1][:value]), val[2], token_text(val[3]), val[5]))
      loc result, val[0], val[6]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 532)
  def _reduce_141(val, _values, result)
     namestack(val[0][:value]) ; result = val[0] 
    result
  end
.,.,

# reduce 142 omitted

# reduce 143 omitted

# reduce 144 omitted

module_eval(<<'.,.,', 'egrammar.ra', 541)
  def _reduce_145(val, _values, result)
     result = val[1] 
    result
  end
.,.,

# reduce 146 omitted

# reduce 147 omitted

module_eval(<<'.,.,', 'egrammar.ra', 558)
  def _reduce_148(val, _values, result)
          result = add_definition(Factory.NODE(val[1], val[3], val[5]))
      loc result, val[0], val[6]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 562)
  def _reduce_149(val, _values, result)
          result = add_definition(Factory.NODE(val[1], val[3], nil))
      loc result, val[0], val[5]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 572)
  def _reduce_150(val, _values, result)
     result = [result] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 573)
  def _reduce_151(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 152 omitted

# reduce 153 omitted

module_eval(<<'.,.,', 'egrammar.ra', 580)
  def _reduce_154(val, _values, result)
     result = Factory.literal(:default); loc result, val[0] 
    result
  end
.,.,

# reduce 155 omitted

module_eval(<<'.,.,', 'egrammar.ra', 584)
  def _reduce_156(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 585)
  def _reduce_157(val, _values, result)
     result = Factory.concat(val[0], '.', val[2][:value]); loc result, val[0], val[2] 
    result
  end
.,.,

# reduce 158 omitted

# reduce 159 omitted

# reduce 160 omitted

module_eval(<<'.,.,', 'egrammar.ra', 594)
  def _reduce_161(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 600)
  def _reduce_162(val, _values, result)
          result = add_definition(Factory.FUNCTION(val[1][:value], val[2], val[4]))
      loc result, val[0], val[5]
    
    result
  end
.,.,

# reduce 163 omitted

# reduce 164 omitted

# reduce 165 omitted

module_eval(<<'.,.,', 'egrammar.ra', 611)
  def _reduce_166(val, _values, result)
     error val[0], "'class' is not a valid classname" 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 615)
  def _reduce_167(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 616)
  def _reduce_168(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 617)
  def _reduce_169(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 621)
  def _reduce_170(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 622)
  def _reduce_171(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 172 omitted

# reduce 173 omitted

# reduce 174 omitted

# reduce 175 omitted

module_eval(<<'.,.,', 'egrammar.ra', 634)
  def _reduce_176(val, _values, result)
     result = Factory.PARAM(val[0][:value], val[2]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 635)
  def _reduce_177(val, _values, result)
     result = Factory.PARAM(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 638)
  def _reduce_178(val, _values, result)
     result = val[1]; val[1].captures_rest() 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 641)
  def _reduce_179(val, _values, result)
     val[1].type_expr(val[0]) ; result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 644)
  def _reduce_180(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 645)
  def _reduce_181(val, _values, result)
     result = val[0][*val[2]] ; loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 650)
  def _reduce_182(val, _values, result)
     result = Factory.fqn(val[0][:value]).var ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 655)
  def _reduce_183(val, _values, result)
     result = Factory.RESERVED(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 656)
  def _reduce_184(val, _values, result)
     result = Factory.RESERVED(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 657)
  def _reduce_185(val, _values, result)
     result = Factory.RESERVED(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 663)
  def _reduce_186(val, _values, result)
     result = Factory.LIST(val[1]); loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 664)
  def _reduce_187(val, _values, result)
     result = Factory.literal([]) ; loc result, val[0], val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 665)
  def _reduce_188(val, _values, result)
     result = Factory.LIST(val[1]); loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 666)
  def _reduce_189(val, _values, result)
     result = Factory.literal([]) ; loc result, val[0], val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 669)
  def _reduce_190(val, _values, result)
     result = Factory.HASH(val[1]); loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 670)
  def _reduce_191(val, _values, result)
     result = Factory.HASH(val[1]); loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 671)
  def _reduce_192(val, _values, result)
     result = Factory.literal({}) ; loc result, val[0], val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 674)
  def _reduce_193(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 675)
  def _reduce_194(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 678)
  def _reduce_195(val, _values, result)
     result = Factory.KEY_ENTRY(val[0], val[2]); loc result, val[1] 
    result
  end
.,.,

# reduce 196 omitted

# reduce 197 omitted

# reduce 198 omitted

module_eval(<<'.,.,', 'egrammar.ra', 686)
  def _reduce_199(val, _values, result)
     result = Factory.literal(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 687)
  def _reduce_200(val, _values, result)
     result = Factory.literal(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 689)
  def _reduce_201(val, _values, result)
     result = Factory.string(val[0], *val[1]) ; loc result, val[0], val[1][-1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 690)
  def _reduce_202(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 691)
  def _reduce_203(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 692)
  def _reduce_204(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 693)
  def _reduce_205(val, _values, result)
     result = [val[0]] + val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 694)
  def _reduce_206(val, _values, result)
     result = Factory.TEXT(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 697)
  def _reduce_207(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 698)
  def _reduce_208(val, _values, result)
     result = [val[0]] + val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 701)
  def _reduce_209(val, _values, result)
     result = Factory.HEREDOC(val[0][:value], val[1]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 704)
  def _reduce_210(val, _values, result)
     result = Factory.SUBLOCATE(val[0], val[1]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 705)
  def _reduce_211(val, _values, result)
     result = Factory.SUBLOCATE(val[0], val[1]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 708)
  def _reduce_212(val, _values, result)
     result = Factory.EPP(val[1], val[2]); loc result, val[0] 
    result
  end
.,.,

# reduce 213 omitted

# reduce 214 omitted

module_eval(<<'.,.,', 'egrammar.ra', 715)
  def _reduce_215(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 716)
  def _reduce_216(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 717)
  def _reduce_217(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 720)
  def _reduce_218(val, _values, result)
     result = Factory.RENDER_STRING(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 721)
  def _reduce_219(val, _values, result)
     result = Factory.RENDER_EXPR(val[1]); loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 722)
  def _reduce_220(val, _values, result)
     result = Factory.RENDER_EXPR(Factory.block_or_expression(*val[2])); loc result, val[0], val[4] 
    result
  end
.,.,

# reduce 221 omitted

# reduce 222 omitted

module_eval(<<'.,.,', 'egrammar.ra', 728)
  def _reduce_223(val, _values, result)
     result = Factory.QREF(val[0][:value])  ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 731)
  def _reduce_224(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

# reduce 225 omitted

module_eval(<<'.,.,', 'egrammar.ra', 737)
  def _reduce_226(val, _values, result)
     result = nil 
    result
  end
.,.,

# reduce 227 omitted

# reduce 228 omitted

# reduce 229 omitted

# reduce 230 omitted

# reduce 231 omitted

# reduce 232 omitted

# reduce 233 omitted

# reduce 234 omitted

# reduce 235 omitted

# reduce 236 omitted

# reduce 237 omitted

# reduce 238 omitted

# reduce 239 omitted

# reduce 240 omitted

# reduce 241 omitted

# reduce 242 omitted

# reduce 243 omitted

# reduce 244 omitted

# reduce 245 omitted

# reduce 246 omitted

# reduce 247 omitted

# reduce 248 omitted

module_eval(<<'.,.,', 'egrammar.ra', 766)
  def _reduce_249(val, _values, result)
     result = nil
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

      end   # class Parser
      end   # module Parser
    end   # module Pops
  end   # module Puppet
